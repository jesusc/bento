@namespace(uri="http://bento/analysis/atl/analysis", prefix="atl_analysis")
package atl_analysis;

import "platform:/resource/genericity.compiler.atl.typing/model/atl_types.ecore";

class AnalysisResult {
   val Problem[*] problems;
   
}

abstract class AnalysisInfo {
   
}

abstract class Problem extends AnalysisInfo {
   
}

abstract class Recovery {   
}

@namespace(uri="http://bento/analysis/atl/analysis/errors", prefix="atl_error")
package atl_error {
	abstract class LocalProblem extends Problem {
	   attr String[1] location;
	   attr String[1] element;
	   
	   val Recovery[0..1] recovery;
	}
	
	abstract class NavigationProblem extends LocalProblem {	}
	abstract class InvalidArgumentProblem extends LocalProblem {	}
	 
	//
	// Example: aClass->select(x)
	// 
	class CollectionOperationOverNoCollectionError extends NavigationProblem {
	      
	}
	
	class FeatureNotFound extends NavigationProblem {
		attr String[1] featureName;
		attr String[1] className;
		attr String[1] metamodelName;
	}
	
	class FeatureNotFoundInUnionType extends NavigationProblem {
		attr String[1] featureName;	   
	}
	
	class InvalidOperand extends InvalidArgumentProblem {
	   attr String[1] operatorSymbol;	   
	}	  

    // Example: Given a root class, e.g., MyClassModel, the expression
    //          aClassModel.refImmediateComposite() will always return null.
	class NoContainerForRefImmediateComposite extends NavigationProblem {
		attr String[1] className;
		attr String[1] metamodelName;			   
	}
}

@namespace(uri="http://bento/analysis/atl/analysis/recovery", prefix="atl_recovery")
package atl_recovery {
	class FeatureFoundInSubclass extends Recovery {
		attr String[1] subclassName;
	}
	
	class TentativeTypeAssigned extends Recovery {
	   ref atl_types.Type[1] type;
	}
}
// References to typing ... 
