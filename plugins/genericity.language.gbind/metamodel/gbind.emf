@namespace(uri="http://genericity/language/gbind", prefix="gbind")
package gbind;

// import "platform:/plugin/be.ac.vub.simpleocl/metamodel/simpleocl.ecore";
//import "platform:/resource/be.ac.vub.simpleocl/metamodel/simpleocl.ecore";

@namespace(uri="http://soft.vub.ac.be/simpleocl/2011/SimpleOCL", prefix="simpleocl")
package simpleocl {

	abstract class LocatedElement {
	  readonly volatile transient derived attr Integer[1] line = "-1";
	  readonly volatile transient derived attr Integer[1] column = "-1";
	  readonly volatile transient derived attr Integer[1] charStart = "-1";
	  readonly volatile transient derived attr Integer[1] charEnd = "-1";
	}
	
	abstract class NamedElement extends LocatedElement {
	  attr String[1] name;
	}
	
	class Module extends NamedElement {
	  val OclMetamodel[*] metamodels;
	  val Import[*]#module imports;
	  val ModuleElement[*]#module elements;
	}
	
	abstract class ModuleElement extends LocatedElement {
	  ref Module[1]#elements module;
	}
	
	class Import extends NamedElement {
	  ref Module[1]#imports module;
	}
	
	abstract class OclExpression extends LocatedElement {
	  !ordered val OclType#oclExpression type;
	  !ordered ref IfExp#elseExpression ifExp3;
	  !ordered ref PropertyCallExp#source appliedProperty;
	  !ordered ref CollectionExp#elements collection;
	  !ordered ref LetExp#in_ letExp;
	  !ordered ref LoopExp#body loopExp;
	  !ordered ref OperationCall#arguments parentOperation;
	  !ordered ref LocalVariable#initExpression initializedVariable;
	  !ordered ref IfExp#thenExpression ifExp2;
	  !ordered ref Operation#body owningOperation;
	  !ordered ref IfExp#condition ifExp1;
	  !ordered ref Attribute#initExpression owningAttribute;
	  !ordered ref OperatorCallExp#source appliedOperator;
	}
	
	class VariableExp extends OclExpression {
	  !ordered ref VariableDeclaration[1]#variableExp referredVariable;
	}
	
	class SuperExp extends OclExpression {
	}
	
	class SelfExp extends OclExpression {
	}
	
	class EnvExp extends OclExpression {
	}
	
	abstract class PrimitiveExp extends OclExpression {
	}
	
	class StringExp extends PrimitiveExp {
	  !unique !ordered attr String[1] stringSymbol;
	}
	
	class BooleanExp extends PrimitiveExp {
	  !unique !ordered attr Boolean[1] booleanSymbol;
	}
	
	abstract class NumericExp extends PrimitiveExp {
	}
	
	class RealExp extends NumericExp {
	  !unique !ordered attr Double[1] realSymbol;
	}
	
	class IntegerExp extends NumericExp {
	  !unique !ordered attr Integer[1] integerSymbol;
	}
	
	abstract class CollectionExp extends OclExpression {
	  val OclExpression[*]#collection elements;
	}
	
	class BagExp extends CollectionExp {
	}
	
	class OrderedSetExp extends CollectionExp {
	}
	
	class SequenceExp extends CollectionExp {
	}
	
	class SetExp extends CollectionExp {
	}
	
	class TupleExp extends OclExpression {
	  val TuplePart[*]#tuple tuplePart;
	}
	
	class TuplePart extends LocalVariable {
	  !ordered ref TupleExp[1]#tuplePart tuple;
	}
	
	class MapExp extends OclExpression {
	  val MapElement[*]#map elements;
	}
	
	class MapElement extends LocatedElement {
	  !ordered ref MapExp[1]#elements map;
	  !ordered val OclExpression[1] key;
	  !ordered val OclExpression[1] value;
	}
	
	class EnumLiteralExp extends OclExpression {
	  !unique !ordered attr String[1] name;
	}
	
	class OclUndefinedExp extends OclExpression {
	}
	
	class StaticPropertyCallExp extends OclExpression {
	  val OclType[1]#staticPropertyCall source;
	  val StaticPropertyCall[1]#staticCallExp staticCall;
	}
	
	abstract class StaticPropertyCall extends LocatedElement {
	  ref StaticPropertyCallExp[1]#staticCall staticCallExp;
	}
	
	class StaticNavigationOrAttributeCall extends StaticPropertyCall {
	  !unique !ordered attr String[1] name;
	}
	
	class StaticOperationCall extends StaticPropertyCall {
	  val OclExpression[*] arguments;
	  !unique !ordered attr String[1] operationName;
	}
	
	class PropertyCallExp extends OclExpression {
	  val PropertyCall[+]#callExp calls;
	  !ordered val OclExpression[1]#appliedProperty source;
	}
	
	abstract class PropertyCall extends LocatedElement {
	  ref PropertyCallExp[1]#calls callExp;
	}
	
	class NavigationOrAttributeCall extends PropertyCall {
	  !unique !ordered attr String[1] name;
	}
	
	class OperationCall extends PropertyCall {
	  val OclExpression[*]#parentOperation arguments;
	  !unique !ordered attr String[1] operationName;
	}
	
	class OperatorCallExp extends OclExpression {
	  val OclExpression argument;
	  !unique !ordered attr String[1] operationName;
	  !ordered val OclExpression[1]#appliedOperator source;
	}
	
	class NotOpCallExp extends OperatorCallExp {
	}
	
	class RelOpCallExp extends OperatorCallExp {
	}
	
	class EqOpCallExp extends OperatorCallExp {
	}
	
	class AddOpCallExp extends OperatorCallExp {
	}
	
	class IntOpCallExp extends OperatorCallExp {
	}
	
	class MulOpCallExp extends OperatorCallExp {
	}
	
	class LambdaCallExp extends VariableExp {
	  val OclExpression[*] arguments;
	}
	
	class BraceExp extends OclExpression {
	  val OclExpression[1] exp;
	}
	
	class CollectionOperationCall extends OperationCall {
	}
	
	abstract class LoopExp extends PropertyCall {
	  !ordered val OclExpression[1]#loopExp body;
	  !ordered val Iterator[+]#loopExpr iterators;
	}
	
	class IterateExp extends LoopExp {
	  !ordered val LocalVariable[1]#baseExp result;
	}
	
	class IteratorExp extends LoopExp {
	  !unique !ordered attr String[1] name;
	}
	
	class LetExp extends OclExpression {
	  !ordered val LocalVariable[1]#letExp variable;
	  !ordered val OclExpression[1]#letExp in_;
	}
	
	class IfExp extends OclExpression {
	  !ordered val OclExpression[1]#ifExp2 thenExpression;
	  !ordered val OclExpression[1]#ifExp1 condition;
	  !ordered val OclExpression[1]#ifExp3 elseExpression;
	}
	
	abstract class VariableDeclaration extends LocatedElement {
	  !unique !ordered attr String[1] varName;
	  !ordered val OclType#variableDeclaration type;
	  !ordered ref VariableExp[*]#referredVariable variableExp;
	}
	
	class LocalVariable extends VariableDeclaration {
	  !ordered ref LetExp#variable letExp;
	  !ordered val OclExpression[1]#initializedVariable initExpression;
	  !ordered ref IterateExp#result baseExp;
	  attr String[1] eq;
	}
	
	class Iterator extends VariableDeclaration {
	  !ordered ref LoopExp#iterators loopExpr;
	}
	
	class Parameter extends VariableDeclaration {
	  !ordered ref Operation[1]#parameters operation;
	}
	
	class CollectionType extends OclType {
	  !ordered val OclType[1]#collectionTypes elementType;
	}
	
	class OclType extends LocatedElement {
	  !unique !ordered attr String[1] name;
	  !ordered ref OclContextDefinition#context_ definitions;
	  !ordered ref OclExpression#type oclExpression;
	  !ordered ref Operation#returnType operation;
	  !ordered ref MapType#valueType mapType2;
	  !ordered ref Attribute#type attribute;
	  !ordered ref MapType#keyType mapType;
	  !ordered ref CollectionType#elementType collectionTypes;
	  !ordered ref TupleTypeAttribute#type tupleTypeAttribute;
	  !ordered ref VariableDeclaration#type variableDeclaration;
	  ref LambdaType#returnType lambdaReturnType;
	  ref LambdaType#argumentTypes lambdaArgType;
	  ref StaticPropertyCallExp#source staticPropertyCall;
	}
	
	class OclModelElementExp extends OclExpression {
	  ref OclModel[1] model;
	  !unique !ordered attr String[1] name;
	}
	
	abstract class Primitive extends OclType {
	}
	
	class StringType extends Primitive {
	}
	
	class BooleanType extends Primitive {
	}
	
	abstract class NumericType extends Primitive {
	}
	
	class IntegerType extends NumericType {
	}
	
	class RealType extends NumericType {
	}
	
	class BagType extends CollectionType {
	}
	
	class OrderedSetType extends CollectionType {
	}
	
	class SequenceType extends CollectionType {
	}
	
	class SetType extends CollectionType {
	}
	
	class OclAnyType extends OclType {
	}
	
	class TupleType extends OclType {
	  val TupleTypeAttribute[*]#tupleType attributes;
	}
	
	class TupleTypeAttribute extends LocatedElement {
	  !ordered val OclType[1]#tupleTypeAttribute type;
	  !ordered ref TupleType[1]#attributes tupleType;
	  !unique !ordered attr String[1] name;
	}
	
	class OclModelElement extends OclType {
	  !ordered ref OclModel[1]#elements model;
	}
	
	class MapType extends OclType {
	  !ordered val OclType[1]#mapType2 valueType;
	  !ordered val OclType[1]#mapType keyType;
	}
	
	class LambdaType extends OclType {
	  val OclType[1]#lambdaReturnType returnType;
	  val OclType[*]#lambdaArgType argumentTypes;
	}
	
	class EnvType extends OclType {
	}
	
	class OclFeatureDefinition extends ModuleElement {
	  !ordered val OclFeature[1]#definition feature;
	  !ordered val OclContextDefinition#definition context_;
	  attr Boolean[1] static;
	}
	
	class OclContextDefinition extends LocatedElement {
	  !ordered ref OclFeatureDefinition[1]#context_ definition;
	  !ordered val OclType[1]#definitions context_;
	}
	
	abstract class OclFeature extends NamedElement {
	  !ordered ref OclFeatureDefinition#feature definition;
	  attr String[1] eq;
	}
	
	class Attribute extends OclFeature {
	  !ordered val OclExpression[1]#owningAttribute initExpression;
	  !ordered val OclType[1]#attribute type;
	}
	
	class Operation extends OclFeature {
	  val Parameter[*]#operation parameters;
	  !ordered val OclType[1]#operation returnType;
	  !ordered val OclExpression[1]#owningOperation body;
	}
	
	abstract class OclModel extends NamedElement {
	  !ordered ref OclModelElement[*]#model elements;
	}
	
	class OclMetamodel extends OclModel {
	  !ordered ref OclInstanceModel[*]#metamodel model;
	  attr String uri;
	}
	
	class OclInstanceModel extends OclModel {
	  !ordered ref OclMetamodel[1]#model metamodel;
	}
	
	datatype Boolean : boolean;
	
	datatype Double : double;
	
	datatype Integer : int;
	
	datatype String : java.lang.String;
}

@namespace(uri="http://http://genericity/language/gbind/dsl", prefix="bindingModel")
package dsl {

	class BindingModel {
	    attr boolean[1] targetBinding = false;
	    
	    val ConceptBinding[*]#model_ bindings;
	    val BaseHelper[*]#model_ helpers;
	
		val ConceptMetaclass[*]  conceptMetaclasses;
		val ConcreteMetaclass[*] concreteMetaclasses;
		val VirtualMetaclass[*] virtualMetaclasses;
	
	    //attr String[1] metamodel;
	    //attr String[0..1] metamodelURI;
	    val MetamodelDeclaration[1] boundConcept;
	    val MetamodelDeclaration[+] boundMetamodels;
	    
	    attr String[1] name;
		//attr String[0..1] componentURI;

		val BindingOptions[1] options;
	}
	
	class BindingOptions {
		attr boolean[0..1] enableClassMerge = false;   
	}
	
	class MetamodelDeclaration extends simpleocl.OclMetamodel {
	   attr String[0..1] metamodelURI;
	   transient attr EResource resource;
	}
	
	abstract class Metaclass {
	  attr String name;
	  ref EClass[1] eclass;
	}
	
	class ConceptMetaclass extends Metaclass {
	}
	
	class ConcreteMetaclass extends Metaclass {
	}
	  
	abstract class ConceptBinding {
	  attr String debugName;
	  ref BindingModel#bindings model_;
	}
	
	class ClassBinding extends ConceptBinding {
	  ref ConceptMetaclass[1] concept;
	  ref ConcreteMetaclass[+] concrete;
	  val simpleocl.OclExpression[1] whenClause;
	}

    //
	// Begin-of Class2Reference - Attempt 1
	//
	class IntermediateClassBinding extends ConceptBinding {
	  ref ConceptMetaclass[1] concept;

	  ref ConcreteMetaclass[1] concreteClass;
	  val ConcreteReferencDeclaringVar[1] concreteReference;
	
	  ref ConceptMetaclass[1] conceptContext;
	  attr String[1] conceptReferenceName;
	  
	
	  val BaseFeatureBinding[*] featureBindings;
	}
	
	// The idea is that the name of the reference automatically generates a new
	// variable to be used by the feature bindings...
	class ConcreteReferencDeclaringVar extends simpleocl.VariableDeclaration {
	}
    //
	// End-of Class2Reference - Attempt 1
	//
		
    //
	// Begin-of Class2Reference - Attempt 2
	//
	class VirtualMetaclass extends Metaclass {
	   val VirtualReference[*] references;
       val VirtualAttribute[*] attributes;
	   val simpleocl.OclExpression[1] init;
	}

	class VirtualFeature {
	   attr String[1] name;  
	}
	
	class VirtualReference extends VirtualFeature  {
		// ref Metaclass[1] type_;   
		ref ConcreteMetaclass[1] type_;
	}

	class VirtualAttribute extends VirtualFeature  {
		// attr String[1] type_;
		val simpleocl.Primitive[1] type_;
	}

	class VirtualTupleExp extends simpleocl.TupleExp {
	  attr String[1] typeName;
	}


	class VirtualClassBinding extends ConceptBinding {
	  ref ConceptMetaclass[1] concept;
	  ref VirtualMetaclass[1] virtual;
	  // val simpleocl.OclExpression[1] whenClause;

	  val ConceptFeatureRef[*] refFeatures;
	}
	
	class ConceptFeatureRef {
	   ref ConceptMetaclass[1] conceptClass;
	   attr String[1] featureName;
	}

    //
	// End-of Class2Reference - Attempt 2
	//
		
	class BaseFeatureBinding extends ConceptBinding {
	  attr String[1] conceptFeature;
	  ref ConceptMetaclass[1] conceptClass;
	  ref ConcreteMetaclass qualifier;
	}
	
	class RenamingFeatureBinding extends BaseFeatureBinding {
	  attr String[1] concreteFeature;
	}
	
	class OclFeatureBinding extends BaseFeatureBinding {
	  val simpleocl.OclExpression[1] concrete;
	}
	
	class BaseHelper {
	  attr String[1] feature;
	  val simpleocl.OclExpression[1] body;
	  val simpleocl.OclType type;
	  ref BindingModel#helpers model_;   
	}
	
	class ConceptHelper extends BaseHelper {
	  ref ConcreteMetaclass qualifier;
	  ref ConceptMetaclass[1] contextClass;   
	}
	
	
	// Intended to be attached to a concrete metaclass, i.e., a facility
	class LocalHelper extends BaseHelper {
	  ref ConcreteMetaclass context;
	  val HelperParameter[*] parameters;	  
	}
	
	class HelperParameter extends simpleocl.VariableDeclaration {
	   
	}
}