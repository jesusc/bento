-- @name		genericity_ocl
-- @version		1.0
-- @authors		jesusc
-- @date		2011/12/09
-- @description	${description}
package genericity_ocl {

    -- Bindings metamodel
	class OclConstraintsModel extends LocatedElement {

		reference contexts[*] ordered container : Context oppositeOf model_;
		
		attribute metamodel[1-1] : String;
		attribute name[1-1] : String;
		
		reference variables[*] ordered container : VariableDeclaration;
	}

    abstract class Metaclass extends LocatedElement {
       attribute name[0-1] : String;
    }
    
    class ConceptMetaclass extends Metaclass { }

	class Context extends LocatedElement  {
		reference model_[0-1] : OclConstraintsModel oppositeOf contexts;
		reference metaclass_[1-1] container : ConceptMetaclass;
		reference invariant[1-1] container : OclInvariant;		
	}

	class OclInvariant extends LocatedElement  {
		reference expr[1-1] container : OclExpression;
		attribute name[0-1] : String;
		attribute description[0-1] : String;		
	}
   	
	-- END-OF Bindings metamodel
	
	abstract class LocatedElement {
		attribute location[0-1] : String;
		attribute commentsBefore[*] ordered : String;
		attribute commentsAfter[*] ordered : String;
	}


}

-- @nsURI http://www.eclipse.org/gmt/2005/OCL
-- @nsPrefix ocl
package OCL {

-- @begin Expressions
	abstract class OclExpression extends LocatedElement {
		reference type[0-1] container : OclType oppositeOf oclExpression;

		-- Opposite references:
		reference ifExp3[0-1] : IfExp oppositeOf elseExpression;
		reference appliedProperty[0-1] : PropertyCallExp oppositeOf source;
		reference collection[0-1] : CollectionExp oppositeOf elements;
		reference letExp[0-1] : LetExp oppositeOf in_;
		reference loopExp[0-1] : LoopExp oppositeOf body;
		reference parentOperation[0-1] : OperationCallExp oppositeOf arguments;
		reference initializedVariable[0-1] : VariableDeclaration oppositeOf initExpression;
		reference ifExp2[0-1] : IfExp oppositeOf thenExpression;
		reference owningOperation[0-1] : Operation oppositeOf body;
		reference ifExp1[0-1] : IfExp oppositeOf condition;
		reference owningAttribute[0-1] : Attribute oppositeOf initExpression;
	}

	class VariableExp extends OclExpression {
		reference referredVariable : VariableDeclaration oppositeOf variableExp;
	}

	class SuperExp extends OclExpression {}

-- @begin LiteralExps
-- @begin PrimitiveExps
	abstract class PrimitiveExp extends OclExpression {}

	class StringExp extends PrimitiveExp {
		attribute stringSymbol : String;
	}

	class BooleanExp extends PrimitiveExp {
		attribute booleanSymbol : Boolean;
	}

	abstract class NumericExp extends PrimitiveExp {}

	class RealExp extends NumericExp {
		attribute realSymbol : Double;
	}

	class IntegerExp extends NumericExp {
		attribute integerSymbol : Integer;
	}
-- @end PrimitiveExps


-- @begin CollectionExps
	abstract class CollectionExp extends OclExpression {
		reference elements[*] ordered container : OclExpression oppositeOf collection;
	}

	class BagExp extends CollectionExp {}

	class OrderedSetExp extends CollectionExp {}

	class SequenceExp extends CollectionExp {}

	class SetExp extends CollectionExp {}
-- @end CollectionExps


	class TupleExp extends OclExpression {
		reference tuplePart[*] ordered container : TuplePart oppositeOf tuple;
	}

	class TuplePart extends VariableDeclaration {
		reference tuple : TupleExp oppositeOf tuplePart;
	}

	class MapExp extends OclExpression {
		reference elements[*] ordered container : MapElement oppositeOf map;
	}

	class MapElement extends LocatedElement {
		reference map : MapExp oppositeOf elements;
		reference key container : OclExpression;
		reference value container : OclExpression;
	}

	class EnumLiteralExp extends OclExpression {
		attribute name : String;
	}

	class OclUndefinedExp extends OclExpression {}
-- @end LiteralExps


-- @begin PropertyCallExps
	abstract class PropertyCallExp extends OclExpression {
		reference source container : OclExpression oppositeOf appliedProperty;
	}

	class NavigationOrAttributeCallExp extends PropertyCallExp {
		attribute name : String;
	}

-- @begin OperationCallExps
	class OperationCallExp extends PropertyCallExp {
		reference arguments[*] ordered container : OclExpression oppositeOf parentOperation;
		attribute operationName : String;
	}

	class OperatorCallExp extends OperationCallExp {}

	class CollectionOperationCallExp extends OperationCallExp {}
-- @end OperationCallExps


-- @begin LoopExps
	abstract class LoopExp extends PropertyCallExp {
		reference body container : OclExpression oppositeOf loopExp;
		reference iterators[1-*] container : Iterator oppositeOf loopExpr;
	}

	class IterateExp extends LoopExp {
		reference result container : VariableDeclaration oppositeOf baseExp;
	}

	class IteratorExp extends LoopExp {
		attribute name : String;
	}
-- @end LoopExps
-- @end PropertyCallExps

	class LetExp extends OclExpression {
		reference variable container : VariableDeclaration oppositeOf letExp;
		reference in_ container : OclExpression oppositeOf letExp;
	}

	class IfExp extends OclExpression {
		reference thenExpression container : OclExpression oppositeOf ifExp2;
		reference condition container : OclExpression oppositeOf ifExp1;
		reference elseExpression container : OclExpression oppositeOf ifExp3;
	}
-- @end Expressions


-- @begin VariableDeclarations
	class VariableDeclaration extends LocatedElement {
		-- Used by compiler
		attribute id[0-1] : String;

		attribute varName : String;
		reference type[0-1] container : OclType oppositeOf variableDeclaration;
		reference initExpression[0-1] container : OclExpression oppositeOf initializedVariable;

		-- Opposite references:
		reference letExp[0-1] : LetExp oppositeOf variable;
		reference baseExp[0-1] : IterateExp oppositeOf result;
		reference variableExp[*] : VariableExp oppositeOf referredVariable;
	}

	class Iterator extends VariableDeclaration {
		reference loopExpr[0-1] : LoopExp oppositeOf iterators;
	}

	class Parameter extends VariableDeclaration {
		reference "operation" : Operation oppositeOf parameters;
	}
-- @end VariableDeclarations



-- @begin Types
	class CollectionType extends OclType {
		reference elementType container : OclType oppositeOf collectionTypes;
	}

	class OclType extends OclExpression {
		attribute name : String;
		
		-- Opposite references:
		reference definitions[0-1] : OclContextDefinition oppositeOf context_;
		reference oclExpression[0-1] : OclExpression oppositeOf type;
		reference "operation"[0-1] : Operation oppositeOf returnType;
		reference mapType2[0-1] : MapType oppositeOf valueType;
		reference "attribute"[0-1] : Attribute oppositeOf type;
		reference mapType[0-1] : MapType oppositeOf keyType;
		reference collectionTypes[0-1] : CollectionType oppositeOf elementType;
		reference tupleTypeAttribute[0-1] : TupleTypeAttribute oppositeOf type;
		reference variableDeclaration[0-1] : VariableDeclaration oppositeOf type;
	}

-- @begin PrimitiveTypes
	abstract class Primitive extends OclType {}

	class StringType extends Primitive {}

	class BooleanType extends Primitive {}

	abstract class NumericType extends Primitive {}

	class IntegerType extends NumericType {}

	class RealType extends NumericType {}
-- @end PrimitiveTypes


-- @begin CollectionTypes
	class BagType extends CollectionType {}

	class OrderedSetType extends CollectionType {}

	class SequenceType extends CollectionType {}

	class SetType extends CollectionType {}
-- @end CollectionTypes

	class OclAnyType extends OclType {

	}

	class TupleType extends OclType {
		reference attributes[*] ordered container : TupleTypeAttribute oppositeOf tupleType;
	}

	class TupleTypeAttribute extends LocatedElement {
		reference type container : OclType oppositeOf tupleTypeAttribute;
		reference tupleType : TupleType oppositeOf attributes;
		attribute name : String;
	}

	class OclModelElement extends OclType {
		reference model : OclModel oppositeOf elements;
	}

	class MapType extends OclType {
		reference valueType container : OclType oppositeOf mapType2;
		reference keyType container : OclType oppositeOf mapType;
	}
-- @end Types

	class OclFeatureDefinition extends LocatedElement {
		reference feature container : OclFeature oppositeOf definition;
		reference context_[0-1] container : OclContextDefinition oppositeOf definition;
	}

	class OclContextDefinition extends LocatedElement {
		reference definition : OclFeatureDefinition oppositeOf context_;
		reference context_ container : OclType oppositeOf definitions;
	}

-- @begin OclFeatures
	abstract class OclFeature extends LocatedElement {
		reference definition[0-1] : OclFeatureDefinition oppositeOf feature;
	}

	class Attribute extends OclFeature {
		attribute name : String;
		reference initExpression container : OclExpression oppositeOf owningAttribute;
		reference type container : OclType oppositeOf "attribute";
	}

	class Operation extends OclFeature {
		attribute name : String;
		reference parameters[*] ordered container : Parameter oppositeOf "operation";
		reference returnType container : OclType oppositeOf "operation";
		reference body container : OclExpression oppositeOf owningOperation;
	}
-- @end OclFeatures

	class OclModel extends LocatedElement {
		attribute name : String;
		reference metamodel : OclModel oppositeOf model;

		-- Opposite references:
		reference elements[*] : OclModelElement oppositeOf model;
		reference model[*] : OclModel oppositeOf metamodel;
	}
}

-- @nsURI http://www.eclipse.org/gmt/2005/PrimitiveTypes
-- @nsPrefix ptypes
package PrimitiveTypes {
	datatype Boolean;
	datatype Double;
	datatype Integer;
	datatype String;
}
