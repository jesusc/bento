syntax genericity_dsl(k = 0) {

	primitiveTemplate identifier for String default using NAME:
		value = "%token%";

	primitiveTemplate identifierOrKeyword for String using NAME orKeyword:
		value = "%token%";

	primitiveTemplate stringSymbol for String using STRING:
		value = "ei.unescapeString(%token%, 1)",
		serializer="'\'' + %value%.toCString() + '\''";

	primitiveTemplate integerSymbol for Integer default using INT:
		value = "Integer.valueOf(%token%)";

	primitiveTemplate floatSymbol for Double default using FLOAT:
		value = "Double.valueOf(%token%)";

-- @begins BINDING
	template BindingModel main context
		: "binding" name "for" metamodel "{" 
				[ bindings ] {indentIncr = 0, endNL = false} 
				[ helpers ] {indentIncr = 0, endNL = false}
			"}"  
		;		
			
	template ConceptBinding abstract;
	
	template ClassBinding :
		"class" concept{refersTo = name, lookIn = #all, autoCreate = ifmissing} 
		"to" concrete {refersTo = name, lookIn = #all, autoCreate = ifmissing, separator=","}
		(isDefined(whenClause) ? "when" whenClause)
	;

	template Metaclass abstract;
    template ConceptMetaclass : name; 
    template ConcreteMetaclass : name;

    template BaseFeatureBinding abstract;

	template OclFeatureBinding :	
		"feature" conceptClass{refersTo = name, lookIn = #all} 
			(isDefined(qualifier) ? "[" qualifier{refersTo = name, lookIn = #all} "]" ) 
			"." conceptFeature "=" concrete
	;

	template RenamingFeatureBinding :	
		"feature" conceptClass{refersTo = name, lookIn = #all} 
			(isDefined(qualifier) ? "[" qualifier{refersTo = name, lookIn = #all} "]" ) 
			"." conceptFeature "is" concreteFeature
	;
	

	template BHelper :	
		"helper" contextClass{refersTo = name, lookIn = #all, autoCreate = ifmissing} 			
			"." feature ":" type "=" body
	;


-- @begin Models
	template OclModel
		:	name ":" metamodel{refersTo = name, lookIn = #all, autoCreate = ifmissing}
		;

	template OclModelElement
		:	model{refersTo = name, lookIn = #all, autoCreate = ifmissing} "!" name
		;
-- @end Models


-- @begin OCL
	template OclExpression abstract operatored;

-- @begin operatored
	operatorTemplate IteratorExp(operators = opRarrow, source = 'source', disambiguate = "NAME LPAREN NAME (PIPE | ((COMA NAME)+ PIPE))") context
		:	name "(" iterators{separator = ","} "|" [
				body
			] ")"
		;

	operatorTemplate IterateExp(operators = opRarrow, source = 'source') context
		:	"iterate" "(" iterators{separator = ","} ";" result "|" [
				body
			] ")"
		;

	operatorTemplate CollectionOperationCallExp(operators = opRarrow, source = 'source')
			-- operationName cannot be {as = identifierOrKeyword} because of ->iterate
		:	operationName "(" arguments{separator = ","} ")"
		;


	operatorTemplate OperationCallExp(operators = opPoint, source = 'source', disambiguate = "NAME LPAREN", disambiguateV3 = "NAME LPAREN")
		:	operationName{as = identifierOrKeyword} "(" arguments{separator = ","} ")"
		;

	operatorTemplate NavigationOrAttributeCallExp(operators = opPoint, source = 'source')
		:	name{as = identifierOrKeyword}
		;

	operatorTemplate OperatorCallExp(operators =
			opNot opMinus1
			opStar opSlash opDiv opMod
			opPlus opMinus2
			opEq opGt opLt opGe opLe opNe
			opAnd opOr opXor opImplies
		, source = 'source', storeOpTo = operationName, storeRightTo = arguments);
-- @end operatored

	template Iterator addToContext
		:	varName
		;

-- @begin values
	template OclUndefinedExp
		:	"OclUndefined"
		;

	template PrimitiveExp abstract;
	
	template NumericExp abstract;

	template BooleanExp
		:	(booleanSymbol ? "true" : "false")
		;

	template IntegerExp
		:	integerSymbol
		;

	template RealExp
		:	realSymbol
		;

	template StringExp
		:	stringSymbol{as = stringSymbol}
		;
-- @end values

	template IfExp
		:	"if" condition "then" [
				thenExpression
			] "else" [
				elseExpression
			] "endif"
		;

	template VariableExp(disambiguate = "NAME ~(EXCL)")
		:	referredVariable{refersTo = varName, autoCreate = ifmissing}
		;

	template SuperExp
		:	"super"
		;

	template LetExp context nonPrimary
		:	"let" variable "in"
			[ in_ ] {indentIncr = 0, endNL = false}
		;

	template VariableDeclaration addToContext
		:	varName ":" type "=" initExpression
		;


	template EnumLiteralExp
		:	"#" name
		;

-- @begin CollectionExps
	template CollectionExp abstract;

	template BagExp
		:	"Bag" "{" elements{separator = ","} "}"
		;

	template SetExp
		:	"Set" "{" elements{separator = ","} "}"
		;

	template OrderedSetExp
		:	"OrderedSet" "{" elements{separator = ","} "}"
		;

	template SequenceExp
		:	"Sequence" "{" elements{separator = ","} "}"
		;
-- @end CollectionExps

	template MapExp
		:	"Map" "{" elements{separator = ","} "}"
		;

	template MapElement
		:	"(" key "," 'value' ")"
		;

	template TupleExp
		:	"Tuple" "{" tuplePart{separator= ","} "}"
		;

	template TuplePart
		:	varName{as = identifierOrKeyword} (isDefined(type) ? ":" type) "=" initExpression
		;


-- @begin OclType
	template OclType abstract
		:	"OclType"
		;

	template OclAnyType
		:	"OclAny"
		;

	template TupleType
		:	"TupleType" "(" attributes{separator = ","} ")"
		;

	template TupleTypeAttribute
		:	name ":" type
		;

	template MapType
		:	"Map" "(" keyType "," valueType ")"
		;

	template Primitive abstract;

	template NumericType abstract;

	template IntegerType
		:	"Integer"
		;

	template RealType
		:	"Real"
		;

	template BooleanType
		:	"Boolean"
		;

	template StringType
		:	"String"
		;

	template CollectionType abstract
		:	"Collection" "(" elementType ")"
		;

	template BagType
		:	"Bag" "(" elementType ")"
		;

	template SetType
		:	"Set" "(" elementType ")"
		;

	template OrderedSetType
		:	"OrderedSet" "(" elementType ")"
		;

	template SequenceType
		:	"Sequence" "(" elementType ")"
		;

-- @end OclTypes

-- @end OCL

	symbols {
		lsquare		= "[";
		rsquare		= "]"	: rightSpace;
		excl		= "!";
		coma		= ","	: leftNone, rightSpace;
		lparen		= "(";
		rparen		= ")"	: leftNone, rightSpace;
		lcurly		= "{"	: leftSpace;
		rcurly		= "}"	: leftNone, rightSpace;
		semi		= ";"	: leftNone, rightSpace;
		colon		= ":"	: leftSpace, rightSpace;	-- except after def where it is leftNone, rightSpace
		pipe		= "|"	: leftSpace, rightSpace;
		sharp		= "#"	: leftSpace;
		qmark		= "?";
		arobas		= "@"	: rightNone;

		-- operator symbols
		point		= "."	: leftNone;
		rarrow		= "->"	: leftNone;
		minus		= "-"	: leftSpace, rightSpace;
		star		= "*"	: leftSpace, rightSpace;
		slash		= "/"	: leftSpace, rightSpace;
		plus		= "+"	: leftSpace, rightSpace;
		eq			= "="	: leftSpace, rightSpace;
		gt			= ">"	: leftSpace, rightSpace;
		lt			= "<"	: leftSpace, rightSpace;
		ge			= ">="	: leftSpace, rightSpace;
		le			= "<="	: leftSpace, rightSpace;
		ne			= "<>"	: leftSpace, rightSpace;
		larrow		= "<-"	: leftSpace, rightSpace;
		assignarrow	= "<:="	: leftSpace, rightSpace;
	}

	operators {
		priority 0 {	-- 0 is highest
			opPoint = point, 2;
			opRarrow = rarrow, 2;
		}

		priority 1 {
			opNot = "not", 1;		-- no corresponding symbol => symbol is the keyword defined by the quoted string (which is also the name)
			opMinus1 = minus, 1;
		}

		priority 2 {
			opStar = star, 2;
			opSlash = slash, 2;
			opDiv = "div", 2;
			opMod = "mod", 2;
		}

		priority 3 {
			opPlus = plus, 2;
			opMinus2 = minus, 2;
		}

		priority 4 {
			opEq = eq, 2;
			opGt = gt, 2;
			opLt = lt, 2;
			opGe = ge, 2;
			opLe = le, 2;
			opNe = ne, 2;
		}

		priority 5 {
			opAnd = "and", 2;
			opOr = "or", 2;
			opXor = "xor", 2;
			opImplies = "implies", 2;
		}
	}

	token COMMENT	: endOfLine(start = "--");
	token STRING	: multiLine(start = "\'", end = "\'", esc = "\\");
	
	lexer = "
%options testLiterals = false;
NL
	:	(	'\\r' '\\n'
		|	'\\n' '\\r'	//Improbable
		|	'\\r'
		|	'\\n'
		)
	{newline();}
	;

WS
	:	(	' '
		|	'\\t'
		)
	;

%protected
DIGIT
	:	'0'..'9'
	;

%protected
ALPHA
	:	'a'..'z'
	|	'A'..'Z'
	|	'_'
	//For Unicode compatibility (from 0000 to 00ff)
	|	'\\u00C0' .. '\\u00D6'
	|	'\\u00D8' .. '\\u00F6'
	|	'\\u00F8' .. '\\u00FF'
	;

%protected
SNAME
%v2	options {
%v2		testLiterals = true;
%v2	}
%v2	:	(ALPHA) (ALPHA | DIGIT | {LA(2) == ':'}?':' ':')*
//TODO:%v3	:	(ALPHA) (ALPHA | DIGIT | {input.LA(2) == ':'}?':' ':')*
%v3	:	(ALPHA) (ALPHA | DIGIT)*
;

NAME
	:	(
%v3			SNAME
%v2			s:SNAME {if(s.getType() != SNAME) $setType(s.getType());}
		|	'\"'!
			(	ESC
			|	'\\n' {newline();}
			|	~('\\\\'|'\\\"'|'\\n')
			)*
			'\"'!
%v3			{setText(ei.unescapeString(getText(), 1));}
		)
	;

INT
       :       (DIGIT)+
       			// cannot accept DIGIT '.' because it would conflict with Navigation
%v2             (('.' DIGIT)=> '.' (DIGIT)+ {$setType(FLOAT);})?
%v3             (|{ ((input.LA(2) >= '0') && (input.LA(2) <= '9')) }? => '.' DIGIT+ {$type = FLOAT;})
       ;
%v3 fragment FLOAT:;

%protected
ESC
	:	'\\\\'!
		(	'n' %v2{%setText(\"\\n\");}
		|	'r' %v2{%setText(\"\\r\");}
		|	't' %v2{%setText(\"\\t\");}
		|	'b' %v2{%setText(\"\\b\");}
		|	'f' %v2{%setText(\"\\f\");}
		|	'\"' %v2{%setText(\"\\\"\");}
		|	'\\'' %v2{%setText(\"\\'\");}
		|	'\\\\' %v2{%setText(\"\\\\\");}
		|	(
				('0'..'3')
				(
%v2					options {
%v2						warnWhenFollowAmbig = false;
%v2					}
				:	('0'..'7')
					(
%v2						options {
%v2							warnWhenFollowAmbig = false;
%v2						}
					:	'0'..'7'
					)?
				)?
			|	('4'..'7')
				(
%v2					options {
%v2						warnWhenFollowAmbig = false;
%v2					}
				:	('0'..'7')
				)?
			)
				{
%v2					String s = %getText;
%v2					int i;
%v2					int ret = 0;
%v2					String ans;
%v2					for (i=0; i<s.length(); ++i)
%v2						ret = ret*8 + s.charAt(i) - '0';
%v2					ans = String.valueOf((char) ret);
%v2					%setText(ans);
				}
		)
	;
	";

}
