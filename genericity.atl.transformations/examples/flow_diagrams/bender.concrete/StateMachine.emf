@namespace(uri="umbra.StateMachine", prefix="umbra.StateMachine")
package stateMachine;

class StateMachine {
  attr String nombre;
  val State[*] states;
  val Properties properties;
}

class Properties {
  attr String applicationAddress;
  attr String mediaFromAddr;
  attr String mediaToAddr;
  attr String mediaURI;
  attr String recordPath;
  attr String scscfUser;
  attr String scscfHost;
  attr int scscfPort;
  attr String scscfProtocol;
  attr String applicationServerProtocol;
  attr String applicationServerHost;
  attr int applicationServerPort;
  attr String mediaHost;
  attr int mediaPort;
  attr String mediaProtocol;
  attr boolean setupConference;
}

class State {
  attr String nombre;
  val Transition[*]#src outs;
  val State[*]#parent children;
  ref State#children parent;
}

class InitialState extends State {
}

class FinalState extends State {
}

class CompositeState extends State {
  ref StateMachine sm;
}

abstract class Action {
}

abstract class IvrAction extends Action {
}

class HangUp extends IvrAction {
}

class NewCall extends IvrAction {
  attr String from;
  attr String to;
}

class Play extends IvrAction {
  attr String baseURL;
  attr String[*] mediaURI;
}

class PlayCollect extends Play {
}

class PlayRecord extends Play {
}

class RemoveRecord extends IvrAction {
  attr String recordId;
}

class Terminate extends IvrAction {
}

class SendSms extends Action {
  val SMS sms;
}

class SMS {
  attr String from;
  attr String to;
  attr String text;
}

class SetTimer extends Action {
  attr double millis;
}

abstract class Transition {
  val Action[*] action;
  ref State#outs src;
  ref State defaultTar;
}

abstract class IVREvent extends Transition {
}

class Bye extends IVREvent {
}

class Call extends IVREvent {
  attr String from;
  attr String to;
}

class PickUp extends IVREvent {
}

class Played extends IVREvent {
}

class Recorderd extends IVREvent {
  attr String recordId;
}

class Terminated extends IVREvent {
}

class Init extends IVREvent {
}

class Cancel extends IVREvent {
}

class CollectTimeout extends IVREvent {
}

class Managed extends IVREvent {
  attr boolean success;
  attr int code;
}

class NoneEvent extends Transition {
}

class SMSReceived extends Transition {
  val SMS sms;
}

class Timer extends Transition {
}

class Collected extends IVREvent {
  val Branch[*] branches;
}

abstract class Branch {
  ref State out;
  val Action[*] action;
}

class Key extends Branch {
  attr String[1] key;
}

class Otherwise extends Branch {
}

