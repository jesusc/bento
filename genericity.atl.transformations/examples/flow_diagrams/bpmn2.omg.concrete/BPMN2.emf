@namespace(uri="omg.BPMN2", prefix="BPMN2")
package BPMN2;

@namespace(uri="omg.BPMN2.Foundation", prefix="BPMN2_Foundation")
package Foundation {
   
	abstract class BaseElement {
	  attr String ~id;
	}
	
	abstract class RootElement {
	   
	}
	
	class Definitions extends BaseElement{		// Root class
	   attr String name;
	   val RootElement[*] rootElements;
	   
	   //val FlowElement[*] elements; //
	}
}

@namespace(uri="omg.BPMN2.Common", prefix="BPMN2_Common")
package Common {

   enum  GatewayDirection { 
   		Unspecified; Converging; Diverging; Mixed;  }

   abstract class FlowElement extends Foundation.BaseElement, Foundation.RootElement { 		// not correct, but did not find another way to put elements in Definitions
      attr String name;
   }

   abstract class FlowNode extends FlowElement { 
      ref SequenceFlow[*]#targetRef incoming;
      ref SequenceFlow[*]#sourceRef outgoing;
   } 
   
   abstract class FlowElementsContainer extends Foundation.BaseElement { 
      val FlowElement[*] flowElements;
   }
   
   abstract class CallableElement extends Foundation.RootElement{ 
      val String name;
   }
   
   class Expression { } 
   
   class SequenceFlow extends FlowElement { 
      attr boolean isImmediate;
      ref  FlowNode[1]#outgoing sourceRef;
      ref  FlowNode[1]#incoming targetRef;
      val  Expression[0..1] conditionExpression;
   }
   
   class Gateway extends FlowNode {
      attr GatewayDirection gatewayDirection;      
   }
   
   class ExclusiveGateway extends Gateway {
      ref SequenceFlow[0..1] default;
   }
   
   class InclusiveGateway extends Gateway {
      ref  SequenceFlow[0..1] 	default;
      val  Expression[0..1] 	conditionExpression;
   }
   
   class ParallelGateway extends Gateway {
      ref  SequenceFlow[0..1] 	default;
      val  Expression[0..1] 	activationCondition;
   }
}

@namespace(uri="omg.BPMN2.Data", prefix="BPMN2_Data")
package Data {
   class ItemAwareElement extends Foundation.BaseElement, Foundation.RootElement{
      
   }
   
   class Property extends ItemAwareElement{
      
   }
   
   class InputOutputSpecification {
      val DataInput[*] 	dataInputs;
      val DataOutput[*] dataOutputs;
   }
   
   class DataInput extends ItemAwareElement{
      attr String name;
      attr boolean isCollection;
   }
   
   class DataOutput extends ItemAwareElement{
      attr String name;
      attr boolean isCollection;
   }
   
   class DataInputAssociation{
      
   }
   
   class DataOutputAssociation{
      
   }
}

@namespace(uri="omg.BPMN2.Activities", prefix="BPMN2_Activities")
package Activities {

   enum AdHocOrdering         { Parallel; Sequential;  } 
   
   class ResourceRole {
      attr String name;
   }
   
   class Performer extends ResourceRole {
   }
   
   abstract class Activity extends Common.FlowNode { // from Activities
      attr boolean 								isForCompensation;
      attr int 									startQuantity;
      attr int 									completionQuantity;
      ref  Common.SequenceFlow[0..1] 			default;
      val  Data.InputOutputSpecification[0..1]	ioSpecification;
      val  Data.DataInputAssociation[*] 		dataInputAssociations;
      val  Data.DataOutputAssociation[*]		dataOutputAssociations;
      val  Data.Property[*] 					properties;
            
      val  ResourceRole[*] 						resources;
   }
     
   class CallActivity extends Activity { 
      ref Common.CallableElement[0..1] calledElementRef;
   }
   
   class SubProcess extends Activity, Common.FlowElementsContainer { // from Activities
      attr boolean triggeredByEvent;
   }
   
   class AdHocSubProcess extends SubProcess { 
      attr AdHocOrdering 	ordering;
      attr boolean 			cancelRemainingInstances;
   }
   
   class Transaction extends SubProcess { 
      attr String protocol;
      attr String method ;
   }      
   
   class Task extends Activity {} // from Activities
   
   class SendTask extends Task { // from Activities
      attr String implementation ;
   }   
      
   class ReceiveTask extends Task { // from Activities
      attr String 	implementation;
      attr boolean 	instantiate;
   }   
   
}


@namespace(uri="omg.BPMN2.Events", prefix="BPMN2_Events")
package Events {
	abstract class Event extends Common.FlowNode {
		val Data.Property[*] properties; 			   	   
	}     
	
	abstract class ThrowEvent extends Event {
	   // many things missing!!
	}
	
	abstract class CatchEvent extends Event {
	   // many things missing!!
	}
	
	class StartEvent extends CatchEvent {
		attr boolean isInterrupting;    
	}
	
	class EndEvent extends ThrowEvent{
	   
	}
	
	// Many more kinds of events missing!!
}