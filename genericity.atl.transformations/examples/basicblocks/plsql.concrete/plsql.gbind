	-- In statementContainer:
	-- For the moment only one level of Block nested (otherwise use statementContainer)
	-- and write the flattening of statements accordingly

binding PlSql for Imp { 
	class GoToStatement to GotoStatement -- PROBAR A QUITARLO	
	class UnconditionalGoto to GotoStatement
	class Procedure to TriggerBlock

	class Statement to Statement
	class IfStatement to IfStatement

	-- feature Procedure.name is name
	-- feature UnconditionalGoto.target is JumpLabel
	-- feature Statement.self_label is Label
	-- feature UnconditionalGoto.target_statement  = self.JumpLabel.refImmediateComposite()

	-- Deberia duplicarse en Function y Subroutine
	feature Procedure.statements_ = 	self.refGetValue('statements')->collect(s | 
  		if s.oclIsTypeOf(Imp!BlockStatement) then
			s.refGetValue('statements')
		else
			s
		endif)->flatten()

	feature Statement.statementContainer =  let c : OclAny = self.refImmediateComposite() in
 		--if c.oclIsKindOf(Imp!BlockStatement) then
		--	c.refImmediateComposite() 
		--else
			c	
		--endif

	feature IfStatement.ifStatements_   = self.ifStatements
	feature IfStatement.elseStatements_ = self.elseStatements

	-- Holes, which are defined on concrete metaclasses
	helper Expression.behaveAsStatement   : Boolean = false
	helper TriggerBlock.behaveAsStatement : Boolean = false

    helper Statement.toInfo : String = self.oclType().name
}


