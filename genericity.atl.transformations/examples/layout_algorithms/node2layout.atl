module node2layout;
create OUT : LYT from IN : SRC;

helper def: MAX_X : Integer = 600;
helper def: STEP  : Integer = 50;

-- TODO: When mapped to N things, the type of this Map is a problem... it works because 
-- ATL is actually dynamic, and duck typed in some parts
helper def: layoutMap : Map(SRC!Node, OclAny)  =
	let initial : OclAny = Tuple { x = 10, y = 10, all = Map { }, direction = true } in
	SRC!Node.allInstances()->iterate(n; c : OclAny = initial |
		let new : OclAny =
			-- from left to right
			if c.direction = true then
				if c.x > thisModule.MAX_X then
					Tuple { x = thisModule.MAX_X + thisModule.STEP,
					        y = c.y + thisModule.STEP, 
							direction = false, node = n } 			
				else
					Tuple { x = c.x + thisModule.STEP, 
							y = c.y, 
							direction = true, node = n }				
				endif
			else
			-- from right to left
				if c.x < thisModule.STEP then
					Tuple { x = 10,
					        y = c.y + thisModule.STEP, 
							direction = true, node = n } 							
				else
					Tuple { x = c.x - thisModule.STEP, 
							y = c.y, 
							direction = false, node = n }				
					
				endif		
			endif
		in Tuple { x = new.x, y = new.y, all = c.all.including(n, new), direction = c.direction }
	).all
;

rule flowdiagram {
	from src : SRC!Node
 	using {
		tuple  : OclAny = thisModule.layoutMap.get(src);
 	}
	to   tgt  : LYT!Node (
		x <- tuple.x,
		y <- tuple.y,
		ref <- src
	)
}
