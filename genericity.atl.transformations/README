
== Execution overview

Here are the steps:

	1. Write a "generic transformation", Tg.
	
	2. Inject the transformation Tg into its abstract syntax model Tg.xmi
	   Use the program atl.parser.Injector (project genericity.atl.parser)
	   to create the model. It takes the name Tg and the paths to input and output directory.
	
	3. Write a binding to a concrete transformation (using ATL syntax as a shortcut), BINDatl	   
	
	4. Inject BINDatl to its abstract syntax model, BINDatl.xmi, like in step 2.
	
	5. Transform BINDatl to a model conforming to the binding metamodel (bindings.ecore), BIND
	   This is done using "atldsl2binding.etl". You have to configure the launcher using
	   the following parameters:
	   	
	   		ATL	with 
	   			model      = path to BINDatl.xmi
	   			metamodel  = metamodels/ATL.ecore (or just the URI, if you are lucky...)
	   			readOnLoad = true
	   		Bind  with
	   			model      = path to BIND.xmi
	   			metamodel  = metamodels/bindings.ecore 
	   			storeOnDisposal = true
	
	6. Transform Tg.xmi through BIND into Tadapted.xmi 
	   This is done using "apply_binding.etl". These are the parameters:
	   
	   		ATL	with 
	   			model      = path to Tg.xmi
	   			metamodel  = metamodels/ATL.ecore 
	   			readOnLoad = true
	   		Bind  with
	   			model      = path to BIND.xmi
	   			metamodel  = metamodels/bindings.ecore 
	   			readOnLoad = true
	   		OUT with
	   			model      = whatever you want, because it is stored manually in the transformation
	   			metamodel  = metamodels/ATL.ecore

	7. Extract Tadapted.xmi into Tadapted.atl to see the result
	   Use the program atl.parser.Extractor (project genericity.atl.parser)
	   to create the model. It takes the filename Tadapted.xmi and the paths to input and output directory.
	
== Example

For each example, its original files are placed into a directory 
below the "examples" folder. The following shows how to adapt
"examples/uml2java".

	1. The generic transformation is uml2java/uml2java.atl

	2. Create a launcher to execute the class atl.parser.Injector with
	   the following arguments:
	   
	   		uml2java.atl 
	   		../genericity.atl.transformations/examples/uml2java/
			../genericity.atl.transformations/examples/tmp_/

	   It generates a file uml2java.atl.xmi in tmp_

	3. The binding written in ATL is uml2java/bind_generalization.atl
	
	4. Create a launcher to execute the class atl.parser.Injector with
	   the following arguments:
	   
	   		bind_generalization.atl 
	   		../genericity.atl.transformations/examples/uml2java/
			../genericity.atl.transformations/examples/tmp_/

	   It generates a file bind_generalization.atl.xmi in tmp_

	5. Transform "bind_generalization.atl.xmi" using "atldsl2binding.etl". 
	   Use the following parameters:
	   	
	   		ATL	with 
	   			model      = /genericity.atl.transformations/tmp_/bind_generalization.atl.xmi
	   			metamodel  = metamodels/ATL.ecore (or just the URI, if you are lucky...)
	   			readOnLoad = true
	   		Bind  with
	   			model      = /genericity.atl.transformations/tmp_/bind_generalization.xmi
	   			metamodel  = metamodels/bindings.ecore
	   			storeOnDisposal = true
	
	6. Transform "bind_generalization.xmi"  using "apply_binding.etl".
	   Use the following parameters:
	   	
	   		ATL	with 
	   			model      = /genericity.atl.transformations/tmp_/uml2java.atl.xmi
	   			metamodel  = metamodels/ATL.ecore 
	   			readOnLoad = true
	   		Bind  with
	   			model      = /genericity.atl.transformations/tmp_/bind_generalization.xmi
	   			metamodel  = metamodels/bindings.ecore
	   			readOnLoad = true   	
	   		OUT	with 
	   			model      = /genericity.atl.transformations/tmp_/uml2java-adapted.xmi
	   			metamodel  = metamodels/ATL.ecore 
	   			* This model is actually serialized in the "post" part of the transformation

	7. Create a launcher to execute the class atl.parser.Extractor with
	   the following arguments:
	   
	   		uml2java-adapted.xmi
	   		../genericity.atl.transformations/examples/tmp_/
			../genericity.atl.transformations/examples/tmp_/

	   It generates a file uml2java-adapted.xmi.atl in tmp_

To test that the adapted transformation work as expected you need
to launch it using the ATL launcher. To do so,

	- Right-click on uml2java-adapted.xmi.atl -> Run as... -> ATL Transformation
	- Fill in UML  with SimpleUML.ecore (the concrete metamodel)
	- Fill in Java with SimpleJava.ecore (this doesn't change from the original transformation)
	- Fill in IN   with "uml2java/test_simpleuml.xmi"
	- Fill in OUT  with "tmp_/test_simpleuml-RESULT.xmi"
	
