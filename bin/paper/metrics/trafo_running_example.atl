module UML2Metrics;
create OUT : Metrics from IN : UML;

rule Class2MeasureSet {
	from class: UML!Class
	to set: Metrics!MetricsSet
	do {
		set.name <- 'class ' + class.name;
		set.metrics <- thisModule.Metric('DIT', class.DIT());
	}
}

rule Metric (name:String, value:Integer) {
        to metric : simple_metrics!Metric ( name <- name, value <- value )
        do { metric; }
}

helper context UML!Class def : DIT() : Real =
	if (self.supers->isEmpty()) then 0
	else
		let dits:Set(Integer) = self.supers->collect(s | s.DIT()) in
			1 + dits->select(v | dits->forAll(v2 | v>=v2))->first()
	endif;

helper context UML!Class def: supers : Set(UML!Class) =
	self.generalization->collect(g | g.general)->excluding(self)->asSet();

helper context UML2!Class def: children: Set(UML2!Class) =
	UML2!Generalization.allInstances() -> select(g | g.general = self) -> collect(g | g.
			specific) -> excluding(self) -> asSet();
