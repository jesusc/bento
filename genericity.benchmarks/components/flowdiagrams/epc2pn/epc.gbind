binding epc {  
	concept   FD   : "platform:/resource/genericity.benchmarks/components/flowdiagrams/metamodels/flow_concept.ecore"
	metamodel EPC  : "platform:/resource/genericity.benchmarks/components/flowdiagrams/epc2pn/epc.ecore"
	
	-- No soportamos or-join (es workflow pattern "local synchronizing merge");
	-- es dificil, podemos referenciar "Formalization and verification of event-driven process chains" de van der Aalst
	
	class FlowDiagram     to EPCDiagram
	class Node            to ProcessObject 
	class Task            to Event, Function -- ï¿½hay que quitar los eventos finales de aqui?
	class FinalTask       to Event when self.outgoing->size() = 0 
	class ParallelSplit   to And when self.outgoing->size() > 1
	class Synchronization to And when self.incoming->size() > 1
	class ExclusiveChoice to Xor when self.outgoing->size() > 1
	class SimpleMerge     to Xor when self.incoming->size() > 1
	class MultiChoice     to Or when self.outgoing->size() > 1
	class FlowEdge        to ControlFlow
	
	feature FlowDiagram.nodes is objects
	feature FlowDiagram.edges = self.flows->select(f | f.oclIsKindOf(EPC!ControlFlow)) -- automated filtering
	feature FlowDiagram.isFinalMandatory = true
	feature Node.outs is outgoing -- definido en todas las clases hija de ProcessObject
	feature Node.ins is incoming -- definido en todas las clases hija de ProcessObject
	feature Task[Event].name is name
	feature Task[Event].isInitial = self.incoming->size() = 0
	feature Task[Function].name is name
	feature Task[Function].isInitial = false
	feature FinalTask.isTerminating = true -- me lo he inventado
	feature FinalTask.isMandatory = true
	feature FlowEdge."in" = self.fsource->union(self.lsource)->union(self.esource) -- reference split
	feature FlowEdge.out = self.ftarget->union(self.ltarget)->union(self.etarget) -- reference split
}