binding epc {  
	concept   FD   : "platform:/resource/genericity.benchmarks/components/flowdiagrams/metamodels/flow_concept.ecore"
	metamodel YAWL : "platform:/resource/genericity.benchmarks/components/flowdiagrams/yawl2pn/yawl.ecore"

    -- PROBLEMA 1: no podemos mapear FLowEdge en el concepto, a la asociaci�n "flowsInto/flowsOutOf" del meta-modelo (no soportamos la heterogeneidad clase->asociaci�n)
    -- PROBLEMA 2: un mismo objeto puede ser JOIN y SPLIT a la vez, lo que har�a que hubiera dos reglas aplicables para el objeto	
	
	class FlowDiagram     to Decomposition -- it can also be Specification 
	class Node            to ProcessControlElement
	class Task            to Task, InputCondition when if self.oclIsKindOf(YAWL!Task) then self.splitType.oclIsUndefined() and self.joinType.oclIsUndefined() else true endif
	class FinalTask       to OutputCondition
	class ParallelSplit   to Task when self.splitType = #AND
	class Synchronization to Task when self.joinType = #AND 
	class ExclusiveChoice to Task when self.splitType = #XOR
	class SimpleMerge     to Task when self.joinType = #XOR  
	class MultiChoice     to Task when self.splitType = #OR 
	class FlowEdge 		  to None
	
	-- class FlowEdge        to ProcessControlElement.flowsInto : ProcessControlElement.flowsOut
	-- feature FlowEdge[ProcessControlElement]."in" = self.flowsInto
	-- feature FlowEdge[ProcessControlElement].out = self.flowsOut
	-- Must be qualified (in case the association ends are of different types)
	
	-- heterogeneidad clase->asociacion no soportada -- 
	
	feature FlowDiagram.nodes is processControlElements 
	feature FlowDiagram.edges = Sequence{} -- heterogeneidad clase->asociacion no soportada --
	feature FlowDiagram.isFinalMandatory = true
	feature Node.outs = Sequence{} -- heterogeneidad clase->asociacion no soportada --
	feature Node.ins = Sequence{}  -- heterogeneidad clase->asociacion no soportada --
	feature Task.name is name
	feature Task.isInitial = self.oclKindOf(YAWL!InputCondition)
	feature FinalTask.isTerminating = true
	feature FinalTask.isMandatory = true
--	feature FlowEdge."in" 
--	feature FlowEdge.out      
}