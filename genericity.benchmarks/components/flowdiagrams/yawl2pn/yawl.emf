@namespace(uri="yawl", prefix="yawl")
package yawl;

// Meta-model taken from the thesis from BIG

class Net {
   val InitialCondition[1] initialCond;
   val FinalCondition[1] finalCond;
   val NetElement[*]#parentNet elements;
   val EventQueue[*]#parentNet queue;
}

abstract class NetElement {
   ref Net[1]#elements parentNet;
   attr String name;
}

abstract class Condition extends NetElement{
  ref ConditionalFlow[*]#condition conditionalFlows;
  ref SimpleFlow[*]#condition simpleFlows;
}
class InitialCondition extends Condition {}
class IntermediateCondition extends Condition {}
class FinalCondition extends Condition {}

class Task extends NetElement{
  ref Split[*]#tasks split;
  ref Join[*]#tasks join;
}

class SingleInstanceTask extends Task{}
class SingleInstanceAtomicTask extends SingleInstanceTask{}
class SingleInstanceCompositeTask extends SingleInstanceTask{}

class MultipleInstanceTask extends Task{}
class MultipleInstanceAtomicTask extends MultipleInstanceTask{}
class MultipleInstanceCompositeTask extends MultipleInstanceTask{}

abstract class Split extends NetElement{
  ref ConditionalFlow[*]#split conditionalFlows;
  ref Task[*]#split tasks;
}
class OrSplit extends Split{}
class AndSplit extends Split{}
class XorSplit extends Split{}

abstract class Join extends NetElement{
  ref SimpleFlow[*]#join simpleFlows;
  ref Task[*]#join tasks;
}
class OrJoin extends Join{}
class AndJoin extends Join{}
class XorJoin extends Join{}

class ConditionalFlow extends NetElement{
  ref Condition[1]#conditionalFlows condition;
  ref Split[1]#conditionalFlows split;
}

class SimpleFlow extends NetElement{
  ref Condition[1]#simpleFlows condition;
  ref Join[1]#simpleFlows join;
}

class EventQueue {
   ref Net[1]#queue parentNet;
}