--
-- Binding between FlowDiagram concept and OMG's BPMN2
-- 
-- The BPMN meta-model is here:
--   * http://www.omg.org/spec/BPMN/2.0/

binding bpmn_omg2fd {  
	concept   FD   : "platform:/resource/genericity.benchmarks/components/flowdiagrams/metamodels/flow_concept.ecore"
	metamodel BPMN : "platform:/resource/genericity.benchmarks/components/flowdiagrams/bpmn2.omg2pn/BPMN.ecore"

	-- class FlowDiagram 		to Definitions 
	class FlowDiagram		to Process -- simplification...
	class Node 				to FlowNode
	class FlowEdge 			to SequenceFlow
	
	class Task				to Task, StartEvent
	class FinalTask			to EndEvent
	class ExclusiveChoice 	to Gateway when if 	 self.oclIsTypeOf(BPMN!EventBasedGateway)  
											then self.eventGatewayType = #exclusive
											else self.oclIsTypeOf(BPMN!ExclusiveGateway) endif
	-- Ommiting EventBasedGateways with eventGatewayType = #parallel that actually act both as start events with split semantics...
	class ParallelSplit   	to ParallelGateway  when self.incoming.size() = 1 and self.outgoing.size() > 1
	class Synchronization 	to ParallelGateway 	when self.incoming.size() > 1 and self.outgoing.size() = 1
	class SimpleMerge   	to InclusiveGateway when self.incoming.size() > 1 and self.outgoing.size() = 1   
	class MultiChoice		to InclusiveGateway when self.incoming.size() = 1 and self.outgoing.size() > 1
	
	-- now map the features...
	-- Task.name to FlowNode.name <-- not necessary to specify, is it?
	-- feature Task.isInitial  to 
	
	feature FlowDiagram.nodes = self.flowElements->select(f | f.oclIsKindOf(BPMN!FlowNode) )
	feature FlowDiagram.edges = self.flowElements->select(f | f.oclIsKindOf(BPMN!SequenceFlow) )
	
	
	feature Task[Task].isInitial = false
	feature Task[Task].name is name

	feature Task[StartEvent].isInitial = true
	feature Task[StartEvent].name is name
	
	feature Task[EndEvent].isInitial = true
	feature Task[EndEvent].name is name
	
	feature Node.outs is outgoing
	feature Node.ins  is incoming
	-- look out: pools and lanes!
	
	feature FlowEdge."in" is sourceRef
	feature FlowEdge.out  is targetRef
	
	feature FinalTask.isTerminating = false
	feature FinalTask.isMandatory   = false
}
