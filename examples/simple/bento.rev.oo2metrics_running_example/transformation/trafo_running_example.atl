-- @path Metrics=/bento.rev.oo2metrics_running_example/metamodels/Metrics.ecore
-- @path UML=/bento.rev.oo2metrics_running_example/metamodels/OO.ecore
module UML2Metrics;
create OUT : Metrics from IN : UML;

rule Class2MeasureSet {
   from class : UML!Class
     to set : Metrics!MetricsSet
do {
   set.name <- 'class ' + class.name;
   set.metrics <- thisModule.Metric('DIT', class.DIT());
}
}

rule Metric( name : String, value : Integer) {
     to metric : Metrics!Metric(
name <- name,
value <- value
)
do {
   metric;
}
}

helper context UML!Class def: DIT() : Real = if ( self.supers->isEmpty() ) then
   0
else
   let dits : Set(Real) = self.supers->collect(s | s.DIT())
 in 1 + dits->select(v | dits->forAll(v2 | v >= v2))->first()
endif;

helper context UML!Class def: supers : Set(UML!Class) = self.generalizationGeneral->excluding(self)->asSet();

helper context UML!Class def: children : Set(UML!Class) = thisModule.AllInstancesOf_Generalization->select(g | g.general = self)->collect(g | g.specific)->excluding(self)->asSet();

helper  def: AllInstancesOf_Generalization : Sequence(TupleType(specific : OclAny, general : OclAny)) = UML!Class.allInstances()->collect(specific | specific.generalizationGeneral->collect(general | Tuple {specific = specific, general = general }))->flatten();

