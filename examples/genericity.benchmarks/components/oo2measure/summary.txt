--- AD-HOC REUSE ---

Steps to make an existing transformation generic:
1.- Identify the effective meta-model of the transformation. This will be the concept (i.e. the interface) of the generic transformation.
2.- Simplify the resulting concept. Some simplifications are the following:
    2a.- collapse hierarchy, removing classes if they are not directly used in the transformation. More exactly, if: (i) the name of the 
         class does not appear in the transformation, and (ii) no association having the class as its type is used in the transformation.
         ---> example: we have removed class "StructuralFeature"
         ---> example: we do not remove class "Type", even if its name does not appear in the transformation, because "TypedElement.type" 
              is used in the transformation and its type is "Type".
    ******************          
    *** QUARANTINE ***     
         For instance, the original meta-model may contain inheritance hierarchies for the purpose of defining common attributes in higher 
         classes, but the transformation uses only the leaf classes; we can pull down the attributes to the leaf classes and remove the 
         parent class. [This makes sense if there are few children classes, otherwise it is better to have the features in a unique parent 
         classes ---> example: remove class Classifier and pull down the generalization and nestedClassifier relations to its only child Class]. 
         ===> if we collapse several classes, should we consider mapping the collapse class to several meta-model classes? 
    *** QUARANTINE ***     
    ******************          
3.- Identify which elements in the concept are mandatory, and which are optional. 
    If the name of a class does not appear in the transformation, then binding the class is optional (???).

Some meta-model configurations can make more difficult reusing a transformation than others. For instance:
1.- Having a class to represent a relationship (e.g. class Generalization in the UML meta-model). Binding a class to a relationship is a 
    heterogeneity that we are not able to solve, if the transformation contains an expression that uses the name of the class.
    UML!Generalization.allInstances()...   

---
--- Comparison of original (oo2measure-all.atl) and manual version (oo2measure.atl) ---
---

Package Metrics
===============
Original: 20 metrics
Manual:   18 metrics
AHEF and OHEF has not been implemented in the manual transformation.

Class Metrics
=============
Original: 31 metrics
Manual: 29 metrics
DPC and RFC has not been implemented in the manual transformation


Original (UML Measure):
  Total number of helpers: 146
    * Total nodes: 1614.0
    * Average nodes: 11.054794520547945

Template:
  Total number of helpers: 71
    * Total nodes: 970.0
    * Average nodes: 13.661971830985916

UML Binding:
  Total number of helpers: 83
    * Total nodes: 1052.0
    * Average nodes: 12.674698795180722

