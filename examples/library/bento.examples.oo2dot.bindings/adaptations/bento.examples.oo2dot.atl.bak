-- @path ECORE=http://www.eclipse.org/emf/2002/Ecore
-- @path DOT=/bento.examples.oo2dot/metamodels/DOT.ecore


--

module KM32DOT;
create OUT: DOT from IN: ECORE;

helper context ECORE!EReference def: owner: OclAny =
	self.eContainingClass;

helper context ECORE!EReference def: isOrdered: OclAny =
	self.ordered;

helper context ECORE!EReference def: isContainer: OclAny =
	self.containment;

helper context ECORE!EReference def: opposite: OclAny =
	self.eOpposite;

helper context ECORE!ETypedElement def: upper: OclAny =
	self.upperBound;

helper context ECORE!ETypedElement def: lower: OclAny =
	self.lowerBound;

helper context ECORE!ETypedElement def: type: OclAny =
	self.eType;

helper context ECORE!EClass def: supertypes: OclAny =
	self.eSuperTypes;

helper context ECORE!EClass def: isAbstract: OclAny =
	self.abstract;

helper context ECORE!EClass def: operations: OclAny =
	self.eOperations;

helper context ECORE!EClass def: structuralFeatures: OclAny =
	self.eStructuralFeatures;

helper context ECORE!EPackage def: contents: OclAny =
	self.eClassifiers;

helper def: DiagramType(): String =
	'None';

helper def: Mode(): String =
	'All';

helper def: Invisible(): Boolean =
	true;

helper def: MinimumArcLength(): Integer =
	2;

helper def: MinimumNodeSeparation(): Real =
	0.75;

helper def: RankingDirection(): String =
	'BT';

helper def: LabelJustification(): String =
	'l';

helper def: LabelLocation(): String =
	't';

helper def: DataTypeHeader(): String =
	'&#171;DataType&#187;\\n';

helper def: DiagramMode(mode: String): Boolean =
	mode = thisModule.Mode();

helper context ECORE!EDataType def: getDataTypeHead(): String =
	thisModule.DataTypeHeader() + self.name;

helper context ECORE!EClass def: getLabel(): String =
	'{' + self.getName() + '|' + self.getAttributes() + '|' + self.getOperations() + '}';

helper context ECORE!EClass def: getName(): String =
	if (self.isAbstract ) then
		'/' + self.name + '/'
	else
		self.name
	endif;

helper context ECORE!EClass def: getAttributes(): String =
	let attributes: Sequence(ECORE!EAttribute) =
		self.structuralFeatures -> select(e | e.oclIsKindOf(ECORE!EAttribute))
	in
		if (attributes -> notEmpty() ) then
			attributes -> iterate(e; acc: String = '' | acc + if ( acc = '' ) then
   ''
else
   '\\n'
endif + e.name + e.getMultiplicity() + ' : ' + e.type.name)
		else
			' '
		endif;

helper context ECORE!EClass def: getOperations(): String =
	let operations: Sequence(ECORE!EOperation) =
		self.operations
	in
		if (operations -> notEmpty() ) then
			operations -> iterate(e; acc: String = '' | acc + e.name + e.getParameters()
					+ if (e.type.oclIsUndefined() ) then
					''
				else
					' : ' + e.type.name
				endif + '\\n')
		else
			' '
		endif;

helper context ECORE!ETypedElement def: getMultiplicity(): String =
	if (self.lower = 0 ) then
		if (self.upper = 0 - 1 ) then
			'[*]'
		else
			'[' + self.lower.toString() + '-' + self.upper.toString() + ']'
		endif
	else
		if (self.upper = 1 ) then
			''
		else
			if (self.upper = 0 - 1 ) then
				'[' + self.lower.toString() + '-' + '*]'
			else
				'[' + self.lower.toString() + self.upper.toString() + ']'
			endif
		endif
	endif;

helper context ECORE!EOperation def: getParameters(): String =
	let parameters: Sequence(ECORE!Parameters) =
		self.parameters
	in
		'(' + parameters -> iterate(e; acc: String = '' | acc + if (e.name = parameters
				-> last().name ) then
				e.name + ' : ' + e.type.name
			else
				e.name + ' : ' + e.type.name + ','
			endif) + ')';

helper def: relationsList: Sequence(TupleType(ref: ECORE!EReference, opposite:
		ECORE!EReference)) =
	let references: Sequence(ECORE!EReference) =
		ECORE!EReference.allInstances() -> reject(e | e.opposite.oclIsUndefined())
	in
		references -> iterate(e; acc: Sequence(TupleType(ref: ECORE!EReference, opposite:
				ECORE!EReference)) = Sequence { } | if (acc -> excludes(Tuple{ref = e,
				opposite = e.opposite}) ) then
				if (acc -> excludes(Tuple{ref = e.opposite, opposite = e}) ) then
					if (e.opposite.isContainer ) then
						acc -> append(Tuple{ref = e, opposite = e.opposite})
					else
						acc -> append(Tuple{ref = e.opposite, opposite = e})
					endif
				else
					acc
				endif
			else
				acc
			endif);

lazy rule Metamodel2Graph {
	from
		m: OclAny
	to
		out: DOT!Graph (
			type <- 'digraph',
			name <- 'KM3 Model in DOT',
			rankDir <- thisModule.RankingDirection(),
			labeljust <- thisModule.LabelJustification(),
			labelloc <- thisModule.LabelLocation(),
			compound <- true,
			concentrate <- thisModule.DiagramMode('Generalization') and ( not thisModule.
					Invisible() ),
			nodeSeparation <- thisModule.MinimumNodeSeparation(),
			nodes <- thisModule.Metamodel_contents(m)
		)
}

rule Package {
	from
		p: ECORE!EPackage
	to
		out: DOT!SubGraph (
			name <- 'cluster_' + p.name,
			label <- SubGraphLabel,
			color <- 'black',
			labelloc <- thisModule.LabelLocation(),
			nodes <- p.contents
		),
		SubGraphLabel: DOT!SimpleLabel (
			content <- p.name
		)
}

rule Datatypes {
	from
		d: ECORE!EDataType
	to
		out: DOT!Node (
			name <- d.name,
			shape <- NodeShape
		),
		NodeShape: DOT!RecordNodeShape (
			name <- 'record',
			label <- NodeLabel
		),
		NodeLabel: DOT!SimpleLabel (
			content <- '{' + d.getDataTypeHead() + '|' + '}'
		)
}

--rule ClassWithSupertypesGeneralizationsDrawn2Node {
--	from
--		c: ECORE!EClass (
--			c.supertypes -> isEmpty() or ( not c.supertypes -> isEmpty()  and (
--					thisModule.Invisible() or ( not thisModule.
--					DiagramMode('Generalization') or thisModule.DiagramMode('All') ) ) )
--		)
--	to
--		out: DOT!Node (
--			name <- c.name,
--			shape <- nodeShape,
--			refers <- Sequence{c.structuralFeatures -> select(e | e.
--					oclIsKindOf(ECORE!EReference))} -> append(supertypeClasses)
--		),
--		nodeShape: DOT!RecordNodeShape (
--			name <- 'record',
--			label <- NodeLabel
--		),
--		NodeLabel: DOT!SimpleLabel (
--			content <- c.getLabel()
--		),
--		supertypeClasses: distinct DOT!DirectedArc foreach(super_ in c.supertypes) (
--			constraint <- thisModule.DiagramType() = 'Generalization' or thisModule.
--					DiagramType() = 'None',
--			style <- if (thisModule.DiagramMode('Generalization') or thisModule.
--					DiagramMode('All') ) then
--					'none'
--				else
--					'invis'
--				endif,
--			fromNode <- c,
--			toNode <- super_,
--			group <- super_.name,
--			minlen <- thisModule.MinimumArcLength(),
--			arrowHead <- arrowHeadShape
--		),
--		arrowHeadShape: distinct DOT!ArrowShape foreach(super_ in c.supertypes) (
--			name <- 'normal',
--			isPlain <- true
--		)
--}

rule ClassWithSupertypesGeneralizationsNotDrawn2Node {
	from
		c: ECORE!EClass (
			c.supertypes -> isEmpty() or ( not c.supertypes -> isEmpty() ) and (
					thisModule.Invisible() or ( not thisModule.
					DiagramMode('Generalization') or thisModule.DiagramMode('All') ) )
		)
	to
		out: DOT!Node (
			name <- c.name,
			shape <- nodeShape,
			refers <- Sequence{c.structuralFeatures -> select(e | e.
					oclIsKindOf(ECORE!EReference))}
		),
		nodeShape: DOT!RecordNodeShape (
			name <- 'record',
			label <- NodeLabel
		),
		NodeLabel: DOT!SimpleLabel (
			content <- c.getLabel()
		)
}

rule Reference2OneWayArc {
	from
		r: ECORE!EReference (
			r.opposite.oclIsUndefined() and ( thisModule.Invisible() or if (r.isContainer
					) then
			thisModule.DiagramMode('Composition')
		else
			thisModule.DiagramMode('Reference')
		endif or thisModule.DiagramMode('All') )
		)
	to
		out: DOT!DirectedArc (
			fromNode <- r.owner,
			toNode <- r.type,
			arrowHead <- arrowHeadShape,
			arrowTail <- arrowTailShape,
			group <- r.type.name,
			style <- if (thisModule.DiagramMode('All') or thisModule.
					DiagramMode('Reference') ) then
					'none'
				else
					if (thisModule.DiagramMode('Composition') and r.isContainer ) then
						'none'
					else
						'invis'
					endif
				endif,
			minlen <- thisModule.MinimumArcLength(),
			headlabel <- ArcHeadLabel,
			constraint <- r.isContainer and ( thisModule.DiagramType() = 'Composition' or
					thisModule.DiagramType() = 'None' )
		),
		ArcHeadLabel: DOT!SimpleLabel (
			content <- r.name + r.getMultiplicity() + if (r.isOrdered ) then
					'{ordered}'
				else
					''
				endif
		),
		arrowHeadShape: DOT!ArrowShape (
			name <- 'vee',
			isPlain <- false,
			clipping <- 'none'
		),
		arrowTailShape: DOT!ArrowShape (
			name <- if (r.isContainer ) then
					'diamond'
				else
					'none'
				endif,
			isPlain <- false,
			clipping <- 'none'
		)
}

rule Reference2Arc {
	from
		r: ECORE!EReference (
			if (not r.opposite.oclIsUndefined() ) then
			thisModule.relationsList -> includes(Tuple{ref = r, opposite = r.opposite})
					and ( thisModule.Invisible() or if (r.isContainer or r.opposite.
					isContainer ) then
				thisModule.DiagramMode('Composition')
			else
				thisModule.DiagramMode('Reference')
			endif or thisModule.DiagramMode('All') )
		else
			false
		endif
		)
	to
		out: DOT!DirectedArc (
			fromNode <- r.owner,
			toNode <- r.type,
			group <- r.type.name,
			minlen <- thisModule.MinimumArcLength(),
			arrowHead <- arrowHeadShape,
			arrowTail <- arrowTailShape,
			taillabel <- ArcTailLabel,
			style <- if (thisModule.DiagramMode('All') or thisModule.
					DiagramMode('Reference') ) then
					'none'
				else
					if (thisModule.DiagramMode('Composition') and ( r.isContainer or r.
							opposite.isContainer ) ) then
						'none'
					else
						'invis'
					endif
				endif,
			constraint <- ( r.isContainer or r.opposite.isContainer ) and ( thisModule.
					DiagramType() = 'Composition' or thisModule.DiagramType() = 'None' ),
			headlabel <- ArcHeadLabel
		),
		ArcHeadLabel: DOT!SimpleLabel (
			content <- r.name + r.getMultiplicity() + if (r.isOrdered ) then
					'{ordered}'
				else
					''
				endif
		),
		ArcTailLabel: DOT!SimpleLabel (
			content <- r.opposite.name + r.opposite.getMultiplicity() + if (r.opposite.
					isOrdered ) then
					'{ordered}'
				else
					''
				endif
		),
		arrowHeadShape: DOT!ArrowShape (
			name <- if (r.opposite.isContainer ) then
					'diamond'
				else
					'none'
				endif,
			isPlain <- false,
			clipping <- 'none'
		),
		arrowTailShape: DOT!ArrowShape (
			name <- if (r.isContainer ) then
					'diamond'
				else
					'none'
				endif,
			isPlain <- false,
			clipping <- 'none'
		)
}

helper def: __convertToSequence__(obj: OclAny): OclAny =
	Sequence{obj} -> flatten();

helper def: EMetamodel_AllInstances: OclAny =
	Sequence{Tuple{contents = ECORE!EPackage.allInstances() -> select(p | p.
			refImmediateComposite().oclIsUndefined()), type__ = 'EMetamodel'}};

helper def: Metamodel_contents(self_: TupleType(contents: OclAny)): OclAny =
	self_.contents;

endpoint rule Metamodel2Graph_ForceTransformation( ) {
using {
   varToForceEvaluation: OclAny = thisModule.EMetamodel_AllInstances -> collect(it |
		thisModule.Metamodel2Graph(it));}

}
