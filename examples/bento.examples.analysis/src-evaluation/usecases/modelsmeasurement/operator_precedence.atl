-- @path WXYZ=/bento.examples.analysis/tests/bento/tests/WXYZ.ecore
-- @path ABCD=/bento.examples.analysis/tests/bento/tests/ABCD.ecore

module operatorprecedence;
create OUT : WXYZ from IN : ABCD;

--helper context ABCD!A
--def : seqWithoutFirst() : Sequence(ABCD!A) =
--	self->subSequence(2,self->size());

helper context ABCD!A
def : test() : String =
	'test';

rule name {
	from
		a : ABCD!A
	to 
		w : WXYZ!W (
			name <- Sequence { 'a' }->select(a | a)->first() 
			--if false then
			--	ABCDA!A.allInstances()->first().name
			--	else 'a' endif

	--		name <- if 1 > 2 and 2 < 1.0 then 
--					WXYZ!W.allInstances()
--			-- a.oclIsKindOf(WXYZ!W).toString() 
--			else 
--				Sequence {'1', '2'}->seqWithoutFirst() 
--			endif
		)
}
