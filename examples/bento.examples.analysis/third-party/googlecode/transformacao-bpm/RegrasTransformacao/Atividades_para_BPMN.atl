-- @nsURI MetaModeloUML=http://www.eclipse.org/uml2/3.0.0/UML
-- @nsURI MetaModeloBPMN=http://stp.eclipse.org/bpmn

module Atividades_para_BPMN;
create ModeloSaida:MetaModeloBPMN  from ModeloEntrada: MetaModeloUML;

-- Helpers
--Helper para verificar se a Activity Partition é lane
helper context MetaModeloUML!ActivityPartition def: isLane(): Boolean =
	if 
		self.superPartition <> OclUndefined
	then
		true
	else
		false
	endif;

--Helper para verificar se OpaqueAction é tarefa
helper context MetaModeloUML!OpaqueAction def: isTask(): Boolean =
	if 
		self.nameExpression = OclUndefined
	then
		true
	else
		false
	endif;


--Helper para verificar se OpaqueAction é InclusiveGateway
helper context MetaModeloUML!OpaqueAction def: isInclusiveGateway(): Boolean =
	if 
		self.nameExpression = 'GatewayDataBasedInclusive'
	then
		true
	else
		false
	endif;


--Helper para verificar se OpaqueAction é InclusiveGateway
helper context MetaModeloUML!JoinNode def: isInclusiveGateway(): Boolean =
	if
		self.nameExpression = 'GatewayDataBasedInclusive'
	then
		true
	else
		false
	endif;


--Helper para verificar se a atividade é Event Intermediate Message
helper context MetaModeloUML!OpaqueAction def: isEventIntermediateMessage(): Boolean =
	if 	self.nameExpression = 'EventIntermediateMessage' then
		true
	else
		false
	endif;


--Helper para verificar se a atividade é Event Intermediate 
helper context MetaModeloUML!OpaqueAction def: isEventIntermediate(): Boolean =
	if 	self.nameExpression <> 'EventIntermediateMessage' and self.nameExpression.toString().startsWith('EventIntermediate') then
		true
	else
		false
	endif;

--Helper para verificar se ControlFlow é Sequence Edge
helper context MetaModeloUML!ControlFlow def: isSequenceEdge(): Boolean =
	if 
		self.name.startsWith('SequenceEdge:')
	then
		true
	else
		false
	endif;

--Rules

--Rule para criar uma atividade e modelo UML por cada diagrama BPMN.
rule ModeloUML2DiagramaBPMN {
	from
		AtividadeUML: MetaModeloUML!Activity
		
	to
		ModeloBPMN: MetaModeloBPMN!BpmnDiagram (
			name <- 'Diagrama BPMN (gerado)',
			artifacts <- MetaModeloBPMN!Artifact.allInstances(),
			pools <- MetaModeloBPMN!Pool.allInstances(),
			messages <- MetaModeloBPMN!MessagingEdge.allInstances()
		)
}

-- rule que transforma ActivityPartition em Pool
rule PartitionUML2PoolBPMN {
	from
		PartitionUML: MetaModeloUML!ActivityPartition (
			not PartitionUML.isLane()
			)
	to
		PoolBPMN: MetaModeloBPMN!Pool (
			name <- PartitionUML.name,
			lanes <- PartitionUML.subpartition,
			sequenceEdges <- MetaModeloBPMN!SequenceEdge.allInstances(),
			vertices <- PartitionUML.containedNode,
			sequenceEdges <- PartitionUML.edge

			)
}


-- rule que transforma ActivityPartition em Lane
rule PartitionUML2LaneBPMN {
	from
		PartitionUML: MetaModeloUML!ActivityPartition (
			PartitionUML.isLane()
			)
	to
		LaneBPMN: MetaModeloBPMN!Lane (
			name <- PartitionUML.name,
			pool <- PartitionUML.superPartition,
			activities <- PartitionUML.containedNode
			)
}


--Tasks
rule OpaqueActionUML2TaskBPMN {
	from
		OpaqueActionUML: MetaModeloUML!OpaqueAction (
			OpaqueActionUML.isTask()
			)
	to
		ActivityBPMN: MetaModeloBPMN!Activity (
			name <- OpaqueActionUML.name,
			activityType <- 'Task'
			--incomingEdges <- OpaqueActionUML.incoming
			-- outgoingEdges <- OpaqueActionUML.outgoing
			
		)
}


-- Loop Task
rule LoopUML2LoopBPMN {
	from
		LoopUML: MetaModeloUML!LoopNode
	to
		LoopBPMN: MetaModeloBPMN!Activity (
			name <- LoopUML.name,
			activityType <- 'Task',
			looping <- true
			-- incomingEdges <- LoopUML.incoming,
			-- outgoingEdges <- LoopUML.outgoing
		)
}


-- Subprocesso
rule ExpansionRegionUML2SubProcessBPMN {
	from
		ExpansionRegionUML: MetaModeloUML!ExpansionRegion
	to
		SubProcessBPMN: MetaModeloBPMN!SubProcess (
			vertices <- ExpansionRegionUML.containedNode,
			name <- ExpansionRegionUML.name
			)
}

-- Edges
-- Control Flow 2 SequenceEdge
rule ControlFlowUML2SequenceEdgeBPMN {
	from
		ControlFlowUML: MetaModeloUML!ControlFlow (
			ControlFlowUML.isSequenceEdge()	
		)
	to
		SequenceEdgeBPMN: MetaModeloBPMN!SequenceEdge (
			name <- ControlFlowUML.name,
			source <- ControlFlowUML.source,
			target <- ControlFlowUML.target
			
		)
}

-- Object Flow 2 Association
rule ObjectFlowUML2AssociationBPMN {
	from
		ObjectFlowUML: MetaModeloUML!ObjectFlow
	to
		AssociationBPMN: MetaModeloBPMN!Association (		
			)
}

-- Rule para transformar Control Flow em Messaging Edge
rule ControlFlowUML2MessagingEdgeBPMN {
	from
		ControlFlowUML: MetaModeloUML!ControlFlow (
			not ControlFlowUML.isSequenceEdge()
			)
	to
		MessagingEdgeBPMN: MetaModeloBPMN!MessagingEdge (
			name <- ControlFlowUML.name	,
			source <- ControlFlowUML.source,
			target <- ControlFlowUML.target
		)
}



--
--Rule para transformar Comment em Text Annotation
rule CommentUML2TextAnnotationBPMN {
	from
		Comment: MetaModeloUML!Comment
	to
		TextBPMN: MetaModeloBPMN!TextAnnotation (
			documentation <- Comment.body	
		)
}


-- Rule para transformação de InterruptibleActivityRegionUML em Group
rule InterruptibleActivityRegionUML2GroupBPMN {
	from
		ActivityRegionUML: MetaModeloUML!InterruptibleActivityRegion
	to
		GrupoBPMN: MetaModeloBPMN!Group
}
	


-- Rule de Data Store para Data Object
rule DataStoreUML2DataObjectBPMN {
	from
		DataStoreUML: MetaModeloUML!DataStoreNode
	to
		DataObjectBPMN: MetaModeloBPMN!DataObject (
			name <- DataStoreUML.name,
			associations <- DataStoreUML.incoming
		)
}

-- Eventos
-- rules para eventos de inicio
rule InicioUML2InicioBPMN {
	from 
		InitialNodeUML: MetaModeloUML!InitialNode (
			InitialNodeUML.nameExpression.name = 'EventStartEmpty'
			)
	to
		AtividadeInicioBPMN: MetaModeloBPMN!Activity (
			activityType <- 'EventStartEmpty',
			name <- InitialNodeUML.name
	--		incomingEdges <- InitialNodeUML.incoming,
--			outgoingEdges <- InitialNodeUML.outgoing
			
			)
}

-- rules para eventos de start timer
rule InicioUML2EventStartTimerBPMN {
	from 
		InitialNodeUML: MetaModeloUML!InitialNode (
			InitialNodeUML.nameExpression.name = 'EventStartTimer'
			)
	to
		AtividadeInicioBPMN: MetaModeloBPMN!Activity (
			activityType <- 'EventStartTimer',
			name <- InitialNodeUML.name
			)
}


-- rules para eventos de start message
rule InicioUML2EventStartMessageBPMN {
	from 
		AcceptEventUML: MetaModeloUML!AcceptEventAction
	to
		AtividadeInicioBPMN: MetaModeloBPMN!Activity (
			activityType <- 'EventStartMessage',
			name <- AcceptEventUML.name
			)
}

--Eventos intermediários
rule OpaqueActionUML2EventIntermediateMessageBPMN {
	from
		OpaqueActionUML: MetaModeloUML!OpaqueAction (
			OpaqueActionUML.isEventIntermediateMessage()
		)
	to
		EventIntermediateMessageBPMN: MetaModeloBPMN!Activity (
			activityType <- 'EventIntermediateMessage',
			name <- OpaqueActionUML.name
			-- incomingEdges <- OpaqueActionUML.incoming,
			-- outgoingEdges <- OpaqueActionUML.outgoing
		)
}

--Eventos intermediários
rule OpaqueActionUML2EventIntermediateBPMN {
	from
		OpaqueActionUML: MetaModeloUML!OpaqueAction (
			OpaqueActionUML.isEventIntermediate()
		)
	to
		EventIntermediateMessageBPMN: MetaModeloBPMN!Activity (
			activityType <- 'EventIntermediateEmpty',
			name <- OpaqueActionUML.name
			-- incomingEdges <- OpaqueActionUML.incoming,
			-- outgoingEdges <- OpaqueActionUML.outgoing
		)
}

-- Eventos finais
-- rules para eventos de fim
rule FinalNodeUML2EventEndEmptyBPMN {
	from 
		FinalNodeUML: MetaModeloUML!FlowFinalNode (
			FinalNodeUML.nameExpression.name = 'EventEndEmpty'
			)
	to
		AtividadeFimBPMN: MetaModeloBPMN!Activity (
			activityType <- 'EventEndEmpty',
			name <- FinalNodeUML.name,
			incomingEdges <- FinalNodeUML.incoming
			
			)
}


-- rules para eventos de fim com mensagem
rule FinalNodeUML2EventEndMessageBPMN {
	from 
		FinalNodeUML: MetaModeloUML!ActivityFinalNode (
			FinalNodeUML.nameExpression.name = 'EventEndMessage'
			)
	to
		AtividadeFimBPMN: MetaModeloBPMN!Activity (
			activityType <- 'EventEndMessage',
			name <- FinalNodeUML.name
			-- incomingEdges <- FinalNodeUML.incoming
			
			)
}


-- rules para eventos de fim
rule FinalNodeUML2EventEndTerminateBPMN {
	from 
		ActivityFinalNodeUML: MetaModeloUML!ActivityFinalNode (
			ActivityFinalNodeUML.nameExpression.name = 'EventEndTerminate'
			)
	to
		AtividadeFimBPMN: MetaModeloBPMN!Activity (
			activityType <- 'EventEndTerminate',
			name <- ActivityFinalNodeUML.name
			-- incomingEdges <- ActivityFinalNodeUML.incoming
			
			)
}

-- gateways
-- rules para gateways exclusivos
rule DecisionNodeUML2ExclusiveGatewayBPMN {
	from
		DecisionUML: MetaModeloUML!DecisionNode
	to
		GateExclusivo: MetaModeloBPMN!Activity (
			activityType <- 'GatewayDataBasedExclusive',
			name <- if
					DecisionUML.name.toString().size() > 0
					then 
					DecisionUML.name
					else
					DecisionUML.qualifiedName
					endif
			-- incomingEdges <- DecisionUML.incoming,
			-- outgoingEdges <- DecisionUML.outgoing
		)
}



-- rule para gateway exclusivo
rule MergeNodeUML2ExclusiveGatewayBPMN {
	from
		MergeUML: MetaModeloUML!MergeNode
	to
		GateExclusivo: MetaModeloBPMN!Activity (
			activityType <- 'GatewayDataBasedExclusive',
			name <- if
					MergeUML.name.toString().size() > 0
					then 
					MergeUML.name
					else
					MergeUML.qualifiedName
					endif
			-- incomingEdges <- MergeUML.incoming,
			-- outgoingEdges <- MergeUML.outgoing
		)
}


-- Todo: rule para gateway inclusivo de entrada
rule OpaqueAction2InclusiveGatewayBPMN {
	from
		OpaqueActionUML: MetaModeloUML!OpaqueAction (
			OpaqueActionUML.isInclusiveGateway()
			)
	to
		InclusiveBPMN: MetaModeloBPMN!Activity (
			name <- if
					OpaqueActionUML.name.toString().size() > 0
					then 
					OpaqueActionUML.name
					else
					OpaqueActionUML.qualifiedName
					endif,
			activityType <- 'GatewayDataBasedInclusive'
			-- incomingEdges <- OpaqueActionUML.incoming,
			-- outgoingEdges <- OpaqueActionUML.outgoing
		)
}

-- rule para gateway inclusivo
rule JoinNodeUML2InclusiveGatewayBPMN {
	from
		JoinUML: MetaModeloUML!JoinNode (
			JoinUML.isInclusiveGateway()	
		)
	to
		GateInclusive: MetaModeloBPMN!Activity (
			activityType <- 'GatewayDataBasedInclusive',
			name <- if
					JoinUML.name.toString().size() > 0
					then 
					JoinUML.name
					else
					JoinUML.qualifiedName
					endif
			-- incomingEdges <- JoinUML.incoming,
			-- outgoingEdges <- JoinUML.outgoing
		)
}

-- rule para gateway paralelo
rule ForkNodeUML2ParallelGatewayBPMN {
	from
		ForkUML: MetaModeloUML!ForkNode
	to
		GateInclusive: MetaModeloBPMN!Activity (
			activityType <- 'GatewayParallel',
			name <- if
					ForkUML.name.toString().size() > 0
					then 
					ForkUML.name
					else
					ForkUML.qualifiedName
					endif
			-- incomingEdges <- ForkUML.incoming,
			-- outgoingEdges <- ForkUML.outgoing
		)
}


-- rule para gateway paralelo
rule JoinNodeUML2ParallelGatewayBPMN {
	from
		JoinUML: MetaModeloUML!JoinNode (
			not JoinUML.isInclusiveGateway()	
		)
	to
		GateInclusive: MetaModeloBPMN!Activity (
			activityType <- 'GatewayParallel',
			name <- if
					JoinUML.name.toString().size() > 0
					then 
					JoinUML.name
					else
					JoinUML.qualifiedName
					endif
			-- incomingEdges <- JoinUML.incoming,
			-- outgoingEdges <- JoinUML.outgoing
		)
}
