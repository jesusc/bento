-- @name		LOTOS
-- @version		1.0
-- @domains		Formal specification
-- @authors		Frédéric Jouault
-- @date		2007/05/21
-- @description	This is a LOTOS (Language Of Temporal Ordering Specification, ISO 8807) metamodel.
-- @see			http://www.inrialpes.fr/vasy/cadp/
package LOTOS {

	abstract class LocatedElement {
		attribute location[0-1] : String;
		attribute commentsBefore[*] ordered : String;
		attribute commentsAfter[*] ordered : String;
	}
	
	abstract class NamedElement extends LocatedElement {
		attribute name : String;
	}

	class Specification extends NamedElement {
		attribute gates[*] ordered : String;
		reference parameters[*] ordered container : Parameter;
		attribute isExit : Boolean;
		reference types[*] ordered container : Type;
		reference definition[0-1] container : Definition;
	}
	
	class Definition extends LocatedElement {
		reference behaviour container : Behaviour;
		reference declarations[*] ordered container : TypeOrProcessDeclaration;
	}
	
	abstract class TypeOrProcessDeclaration extends NamedElement {}
	
	class Process extends TypeOrProcessDeclaration {
		attribute gates[*] ordered : String;
		reference variables[*] ordered container : VariableDeclarations;
		reference parameters[*] ordered container : Parameter;
		reference definition container : Definition;
		attribute isExit : Boolean;
	}
	
-- @begin Behaviour
	abstract class Behaviour extends LocatedElement {
	}
	
	class Let extends Behaviour {
		reference variables container : VariableDeclarations;
		reference value container : Value;
		reference behaviour container : Behaviour;
	}
	
	class Choice extends Behaviour {
		reference variables container : VariableDeclarations;
		reference behaviour container : Behaviour;		
	}
	
	class Hide extends Behaviour {
		attribute gates[*] ordered : String;
		reference behaviour container : Behaviour;
	}
	
	class ProcessCall extends Behaviour, NamedElement {
		attribute gates[*] ordered : String;
		reference arguments[*] ordered container : Value;
	}
	
	abstract class Parallel extends Behaviour {
		reference left container : Behaviour;
		reference right container : Behaviour;
	}
	
	class SimpleParallel extends Parallel {}
	
	class GatedParallel extends Parallel {
		attribute gates[*] ordered : String;
	}
	
	class GuardedBehaviour extends Behaviour {
		reference guard container : GuardExpression;
		reference behaviour container : Behaviour;
	}
	
	class ActionBehaviour extends Behaviour {
		reference action container : Action;
		reference behaviour container : Behaviour;
	}
	
	class Alternative extends Behaviour {
		reference left container : Behaviour;
		reference right container : Behaviour;
	}
-- @end Behaviour

-- @begin Actions
	abstract class Action extends LocatedElement {
	}
	
	class GateAction extends Action {
		attribute gate : String;
		reference communications[*] ordered container : Communication;
		reference guard[0-1] container : GuardExpression;
	}
	
	abstract class Communication extends LocatedElement {}
	
	class InComm extends Communication {
		reference declarations container : VariableDeclarations;
	}
	
	class OutComm extends Communication {
		reference value container : Value;
	}
-- @end Actions

-- @begin Guards
	abstract class GuardExpression extends LocatedElement {}
	
	class EqualityTestGuardExp extends GuardExpression {
		reference left container : Value;
		reference right container : Value;
	}
	
	class BooleanGuardExp extends GuardExpression {
		reference value container : Value;
	}
-- @end Guards

-- @begin Values
	abstract class Value extends LocatedElement {
	}
	
	class Variable extends Value {
		reference declaration : Declaration;
	}
	
	class OperationCall extends Value {
		attribute operationName : String;
		reference arguments[*] ordered container : Value;
	}
	
	class OperatorCall extends Value {
		attribute operatorName : String;
		reference left container : Value;
		reference right container : Value;
	}
	
	class IntegerVal extends Value {
		attribute value : Integer;
	}
	
	class BooleanVal extends Value {
		attribute value : Boolean;
	}
	
	class CastVal extends Value {
-- TODO
--		reference value container : Value;
		reference value container : IntegerVal;
		attribute toType : String;
	}
-- @end Values

	abstract class Declaration extends NamedElement {}
	
	class VariableDeclaration extends Declaration {}
	
	class VariableDeclarations extends LocatedElement {
		reference declarations[*] ordered container : VariableDeclaration;
		attribute type : String;
	}
	
	class Parameter extends VariableDeclaration {}
	
-- @begin Types
	abstract class Type extends TypeOrProcessDeclaration {}
	
	class LibraryList extends Type {
		attribute names[*] ordered : String;
	}
	
	class TypeDefinition extends Type, NamedElement {
		attribute types[1-*] ordered : String;
		attribute sorts[*] ordered : String;
		reference operations[*] ordered container : Operations;
		reference equations[*] ordered container : Equations;
	}
	
	class Operations extends LocatedElement {
		reference declarations[1-*] ordered container : OperationDeclaration;
		attribute parameterTypes[*] ordered : String;
		attribute returnType : String;
	}
	
	class OperationDeclaration extends Declaration {}
	
	class Equations extends NamedElement {
		reference declarations[1-*] ordered container : VariableDeclarations;
		reference ofSorts[*] ordered container : OfSort;
	}
	
	class OfSort extends NamedElement {
		reference equations[*] ordered container : Equation;
	}
	
	abstract class Equation extends LocatedElement {}

	class SimpleEquation extends Equation {
		reference left container : Value;
		reference right container : Value;
	}
	
	class GuardedEquation extends Equation {
		reference guard container : GuardExpression;
		reference equation container : SimpleEquation;
	}
-- @end Types
}

package PrimitiveTypes {
	datatype Boolean;
	datatype Integer;
	datatype String;
}
