-- Creation : 		03/10/06
-- Author : 		IRIT/LAAS labs
-- Contact : 		Benoit Combemale <bcombema at n7.fr>
-- Description : 	SimplePDL (Model) to PetriNet (Model) transformation
module SimplePDL2PetriNet; 
create OUT : PetriNet from  IN : pdl;

rule Process2PetriNet {
	from p : pdl!Process
	to pn : PetriNet!PetriNet (
		nodes <- pdl!WorkDefinition.allInstances()->collect(pl | thisModule.resolveTemp(pl,'p_notStarted'))
				.union(pdl!WorkDefinition.allInstances()->collect(pl | thisModule.resolveTemp(pl,'p_started')))
				.union(pdl!WorkDefinition.allInstances()->collect(pl | thisModule.resolveTemp(pl,'p_inProgress')))
				.union(pdl!WorkDefinition.allInstances()->collect(pl | thisModule.resolveTemp(pl,'p_finished')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'t_start')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'t_finish')))
				.union(pdl!Ressource.allInstances()->collect(r | thisModule.resolveTemp(r,'ressource')))
					-- temporal observer :
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'p_timeA')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'p_timeB')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'p_timeC')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'p_tooLate')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'p_tooEarly')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'t_lock')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'t_deadline')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'t_tooLate')))
				.union(pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'t_tooEarly')))
		, arcs <- pdl!WorkDefinition.allInstances()->collect(tr | thisModule.resolveTemp(tr,'a_nsed2s'))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_s2sed')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_s2sip')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_sip2f')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_f2fed')))
				.union(pdl!WorkSequence.allInstances()->collect(a | thisModule.resolveTemp(a,'a_ws')))
				.union(pdl!Parameter.allInstances()->collect(p | thisModule.resolveTemp(p,'a_r2s')))
				.union(pdl!Parameter.allInstances()->collect(p | thisModule.resolveTemp(p,'a_f2r')))
					-- temporal observer :
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_0')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_1')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_2')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_3')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_4')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_5')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_6')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_7')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_8')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_9')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_10')))				
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_11')))
				.union(pdl!WorkDefinition.allInstances()->collect(a | thisModule.resolveTemp(a,'a_12')))
	)
}

rule WorkDefinition2PetriNet {
	from wd : pdl!WorkDefinition
	to 
		-- PLACES for one WorkDefinition
		p_notStarted : PetriNet!Place (name <- wd.name + '_notStarted', nbJetons <- 1)
		, p_started : PetriNet!Place (name <- wd.name + '_started', nbJetons <- 0) 
		, p_inProgress : PetriNet!Place (name <- wd.name + '_inProgress', nbJetons <- 0) 
		, p_finished : PetriNet!Place (name <- wd.name + '_finished', nbJetons <- 0) 
			-- temporal observer :
		, p_timeA : PetriNet!Place (name <- wd.name + '_timeA', nbJetons <- 0)
		, p_timeB : PetriNet!Place (name <- wd.name + '_timeB', nbJetons <- 0)
		, p_timeC : PetriNet!Place (name <- wd.name + '_timeC', nbJetons <- 0)
		, p_tooLate : PetriNet!Place (name <- wd.name + '_tooLate', nbJetons <- 0)
		, p_tooEarly : PetriNet!Place (name <- wd.name + '_tooEarly', nbJetons <- 0)
		
		-- TRANSITONS for one WorkDefinition
		, t_start : PetriNet!Transition (
				name <- wd.name + '_start'	
				, temps_min <- 0
				, temps_max <- (0-1)
			)
		, t_finish : PetriNet!Transition (
				name <- wd.name + '_finish'
				, temps_min <- 0
				, temps_max <- (0-1)
			)
			-- temporal observer :
		, t_lock : PetriNet!Transition (
				name <- wd.name + '_lock'
				, temps_min <- wd.temps_min
				, temps_max <- wd.temps_min
			)
		, t_deadline : PetriNet!Transition (
				name <- wd.name + '_deadline'
				, temps_min <- wd.temps_max - wd.temps_min
				, temps_max <- wd.temps_max - wd.temps_min
			)
		, t_tooLate : PetriNet!Transition (
				name <- wd.name + 'TooLate'
				, temps_min <- 0
				, temps_max <- 0
			)
		, t_tooEarly : PetriNet!Transition (
				name <- wd.name + 'TooEarly'
				, temps_min <- 0
				, temps_max <- 0
			)
				
		-- ARCS for one WorkDefinition :
		, a_nsed2s : PetriNet!Arc ( 
				kind <- #normal
				, nbJetons <- 1
				, source <- p_notStarted
				, cible <- t_start
			)
		, a_s2sed : PetriNet!Arc ( 
				kind <- #normal
				, nbJetons <- 1
				, source <- t_start
				, cible <- p_started
			)
		, a_s2sip : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- t_start
				, cible <- p_inProgress
			)
		, a_sip2f : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- p_inProgress
				, cible <- t_finish
			)
		, a_f2fed : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- t_finish
				, cible <- p_finished
			)
			
				-- temporal observer :
		, a_12 : PetriNet!Arc ( 
				kind <- #normal
				, nbJetons <- 1
				, source <- t_start
				, cible <- p_timeA
			)
		, a_11 : PetriNet!Arc ( 
				kind <- #normal
				, nbJetons <- 1
				, source <- p_timeA
				, cible <- t_lock
			)
		, a_10 : PetriNet!Arc (
				kind <- #read_arc
				, nbJetons <- 1
				, source <- p_inProgress 
				, cible <- t_lock
			)
		, a_9 : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- t_lock
				, cible <- p_timeB
			)
		, a_8 : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- p_timeB
				, cible <- t_deadline
			)
		, a_0 : PetriNet!Arc (
				kind <- #read_arc
				, nbJetons <- 1
				, source <- p_inProgress
				, cible <- t_deadline
			)
		, a_1 : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- t_deadline
				, cible <- p_timeC
			)
		, a_2 : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- p_timeC
				, cible <- t_tooLate
			)
		, a_3 : PetriNet!Arc (
				kind <- #read_arc
				, nbJetons <- 1
				, source <- p_inProgress
				, cible <- t_tooLate
			)
		, a_4 : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- t_tooLate
				, cible <- p_tooLate
			)
		, a_5 : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- p_timeA
				, cible <- t_tooEarly
			)
		, a_6 : PetriNet!Arc (
				kind <- #read_arc
				, nbJetons <- 1
				, source <- p_finished
				, cible <- t_tooEarly
			)
		, a_7 : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- t_tooEarly
				, cible <- p_tooEarly
			)
}

rule WorkSequence2PetriNet {
	from ws : pdl!WorkSequence
	to 
		a_ws : PetriNet!Arc (
				kind <- #read_arc
				, nbJetons <- 1
				, source <- thisModule.resolveTemp(ws.predecessor,
					if ( (ws.linkType = #finishToStart) or (ws.linkType = #finishToFinish) ) 
						then 'p_finished'
						else 'p_started'
					endif )
				, cible <- thisModule.resolveTemp(ws.successor,
					if ( (ws.linkType = #finishToStart) or (ws.linkType = #startToStart) ) 
						then 't_start'
						else 't_finish'
					endif )
			)
}

rule Ressource2PetriNet {
	from r : pdl!Ressource
	to ressource : PetriNet!Place (name <- r.name, nbJetons <- r.nbOccurence)
}

rule Parameter2PetriNet {
	from p : pdl!Parameter
	to 	
		a_r2s : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- p.ressource
				, cible <- thisModule.resolveTemp(p.workDefinition,'t_start')
			)
		, a_f2r : PetriNet!Arc (
				kind <- #normal
				, nbJetons <- 1
				, source <- thisModule.resolveTemp(p.workDefinition,'t_finish')
				, cible <- p.ressource
			)
	
}
