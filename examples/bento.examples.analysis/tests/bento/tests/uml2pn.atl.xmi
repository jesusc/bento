<?xml version="1.0" encoding="ISO-8859-1"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:atl="http://www.eclipse.org/gmt/2005/ATL" xmlns:ocl="http://www.eclipse.org/gmt/2005/OCL">
  <atl:Module location="4:1-17:2" name="uml2pn">
    <commentsBefore>-- @path PN=/bento.examples.analysis/tests/bento/tests/petri_nets.ecore</commentsBefore>
    <commentsBefore>-- @path UML=/bento.examples.analysis/tests/bento/tests/UML.ecore</commentsBefore>
    <commentsAfter>--rule task_initial { </commentsAfter>
    <commentsAfter>--        from task  : UML!InitialNode </commentsAfter>
    <commentsAfter>--        to   place : PN!Place (</commentsAfter>
    <commentsAfter>--                name   &lt;- 'Initial: '.concat(task.name),</commentsAfter>
    <commentsAfter>--                tokens &lt;- 1 -- because is initial</commentsAfter>
    <commentsAfter>--            )</commentsAfter>
    <commentsAfter>--}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule task { </commentsAfter>
    <commentsAfter>--        from task  : UML!ObjectNode -- , ExecutableNode, InitialNode </commentsAfter>
    <commentsAfter>--        to   place : PN!Place (</commentsAfter>
    <commentsAfter>--                name   &lt;- task.name,</commentsAfter>
    <commentsAfter>--                tokens &lt;- 0 </commentsAfter>
    <commentsAfter>--            )</commentsAfter>
    <commentsAfter>--}</commentsAfter>
    <inModels location="5:22-5:30" name="IN" metamodel="/2"/>
    <outModels location="5:8-5:16" name="OUT" metamodel="/1"/>
    <elements xsi:type="atl:MatchedRule" location="7:1-17:2" name="flowdiagram">
      <commentsAfter>--rule task_initial { </commentsAfter>
      <commentsAfter>--        from task  : UML!InitialNode </commentsAfter>
      <commentsAfter>--        to   place : PN!Place (</commentsAfter>
      <commentsAfter>--                name   &lt;- 'Initial: '.concat(task.name),</commentsAfter>
      <commentsAfter>--                tokens &lt;- 1 -- because is initial</commentsAfter>
      <commentsAfter>--            )</commentsAfter>
      <commentsAfter>--}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule task { </commentsAfter>
      <commentsAfter>--        from task  : UML!ObjectNode -- , ExecutableNode, InitialNode </commentsAfter>
      <commentsAfter>--        to   place : PN!Place (</commentsAfter>
      <commentsAfter>--                name   &lt;- task.name,</commentsAfter>
      <commentsAfter>--                tokens &lt;- 0 </commentsAfter>
      <commentsAfter>--            )</commentsAfter>
      <commentsAfter>--}</commentsAfter>
      <outPattern location="9:9-16:10">
        <elements xsi:type="atl:SimpleOutPatternElement" location="9:14-16:10" varName="net">
          <type xsi:type="ocl:OclModelElement" location="9:21-9:32" name="PetriNet" model="/4"/>
          <bindings location="10:4-10:22" propertyName="elems">
            <commentsAfter>--                elems &lt;- flow.nodes.append(</commentsAfter>
            <commentsAfter>--                             flow.edges.append(</commentsAfter>
            <commentsAfter>--                                 flow.nodes->select(n | n.isSimpleMerge)->collect(n | thisModule.create_transition(n, 1) ))).union( </commentsAfter>
            <commentsAfter>--                                 flow.nodes->select(n | n.isMultiChoice)->collect(n | n.nodeGenerator)->flatten()->collect(n | thisModule.create_transition(n.source, n.num) )).append(</commentsAfter>
            <commentsAfter>---                                 flow.control)->flatten()       </commentsAfter>
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="10:13-10:22" name="node">
              <commentsAfter>--                elems &lt;- flow.nodes.append(</commentsAfter>
              <commentsAfter>--                             flow.edges.append(</commentsAfter>
              <commentsAfter>--                                 flow.nodes->select(n | n.isSimpleMerge)->collect(n | thisModule.create_transition(n, 1) ))).union( </commentsAfter>
              <commentsAfter>--                                 flow.nodes->select(n | n.isMultiChoice)->collect(n | n.nodeGenerator)->flatten()->collect(n | thisModule.create_transition(n.source, n.num) )).append(</commentsAfter>
              <commentsAfter>---                                 flow.control)->flatten()       </commentsAfter>
              <source xsi:type="ocl:VariableExp" location="10:13-10:17" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <inPattern location="8:9-8:33">
        <elements xsi:type="atl:SimpleInPatternElement" location="8:14-8:33" varName="flow" variableExp="/0/@elements.0/@outPattern/@elements.0/@bindings.0/@value/@source">
          <type xsi:type="ocl:OclModelElement" location="8:21-8:33" name="Activity" model="/3"/>
        </elements>
      </inPattern>
    </elements>
  </atl:Module>
  <ocl:OclModel location="5:14-5:16" name="PN" model="/0/@outModels.0"/>
  <ocl:OclModel location="5:27-5:30" name="UML" model="/0/@inModels.0"/>
  <ocl:OclModel location="8:21-8:24" name="UML" elements="/0/@elements.0/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="9:21-9:23" name="PN" elements="/0/@elements.0/@outPattern/@elements.0/@type"/>
</xmi:XMI>
