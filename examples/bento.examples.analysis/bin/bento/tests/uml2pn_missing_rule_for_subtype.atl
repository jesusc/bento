-- @path PN=/bento.examples.analysis/tests/bento/tests/petri_nets.ecore
-- @path UML=/bento.examples.analysis/tests/bento/tests/UML.ecore

module uml2pn;
create OUT : PN from IN : UML;

rule flowdiagram {
        from flow : UML!Activity 
        to   net  : PN!PetriNet (
			elems <- flow.node 	
--                elems <- flow.nodes.append(
--                             flow.edges.append(
--                                 flow.nodes->select(n | n.isSimpleMerge)->collect(n | thisModule.create_transition(n, 1) ))).union( 
--                                 flow.nodes->select(n | n.isMultiChoice)->collect(n | n.nodeGenerator)->flatten()->collect(n | thisModule.create_transition(n.source, n.num) )).append(
---                                 flow.control)->flatten()       
        )
}

rule task_initial { 
        from task  : UML!InitialNode 
        to   place : PN!Place (
                name   <- 'Initial: '.concat(task.name),
                tokens <- 1 -- because is initial
            )
}
--
--rule task { 
--        from task  : UML!ObjectNode -- , ExecutableNode, InitialNode 
--        to   place : PN!Place (
--                name   <- task.name,
--                tokens <- 0 
--            )
--}

