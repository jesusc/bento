-- @path PUB1=/genericity.benchmarks/stbenchmark/metamodels/pub_src.ecore
-- @path PUB2=/genericity.benchmarks/stbenchmark/metamodels/pub_src.ecore
module copypub;
create OUT : PUB2 from IN : PUB_TGT;

rule reference {
 from
  src : PUB_TGT!Publication
 to
  tgt : PUB2!Reference (
   title <- src.title,
   year <- src.year,
   publishedIn <- src.publishedIn,
   authors <- src.authors->collect(a |
    thisModule.convertAuthor(a)
   ) --			authors    <- src.authors
   --			authors    <- src.authors
   
  )
}

lazy rule convertAuthor {
 from
  src : PUB_TGT!Publication
 to
  tgt : PUB2!Author (
   name <- src.name
  )
} -- Converted to lazy rule, because authors are contained in references,
-- but overall, it is needed for class merge to work with the current implementation!
--
--rule author {
--	from src : PUB1!Author
--	to   tgt : PUB2!Author (
--		name <- src.name	
--	)
--}
helper context PUB_TGT!Publication def: title : OclAny =
 self.Title;

helper context PUB_TGT!Publication def: year : OclAny =
 self.Year;

helper context PUB_TGT!Publication def: publishedIn : OclAny =
 self.PublishedIn;

helper context PUB_TGT!Publication def: name : OclAny =
 self.AuthorName;

helper context PUB_TGT!Publication def: authors : OclAny =
 Sequence {self};
-- Converted to lazy rule, because authors are contained in references,
-- but overall, it is needed for class merge to work with the current implementation!
--
--rule author {
--	from src : PUB1!Author
--	to   tgt : PUB2!Author (
--		name <- src.name	
--	)
--}
