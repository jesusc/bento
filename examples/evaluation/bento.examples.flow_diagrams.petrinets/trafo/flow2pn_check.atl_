-- @path FD=/genericity.benchmarks/components/flowdiagrams/metamodels/flow_concept.ecore
-- @path PN=/genericity.benchmarks/components/flowdiagrams/metamodels/petri_nets.ecore

module check_flow2pn;
create OUT : Report from IN : FD;

helper context FD!Node def: check_Task : Boolean      = self.oclIsKindOf(FD!Task);
helper context FD!Node def: check_FinalTask : Boolean = self.oclIsKindOf(FD!FinalTask);
helper context FD!Node def: check_ParallelSplit : Boolean = self.oclIsKindOf(FD!ParallelSplit);
helper context FD!Node def: check_Synchronization : Boolean = self.oclIsKindOf(FD!Synchronization);
helper context FD!Node def: check_SimpleMerge : Boolean = self.oclIsKindOf(FD!SimpleMerge);
helper context FD!Node def: check_ExclusiveChoice : Boolean = self.oclIsKindOf(FD!ExclusiveChoice);
helper context FD!Node def: check_MultiChoice : Boolean = self.oclIsKindOf(FD!MultiChoice);

rule check_node {
	from
		node : FD!Node ( 
			not 
			(
				node.check_Task or 
				node.check_FinalTask or
				node.check_ParallelSplit or
				node.check_Synchronization or
				node.check_SimpleMerge or
				node.check_ExclusiveChoice or
				node.check_MultiChoice
			)
		)
	to 
		r : Report!ReportElement (
			message <- 'Possibly unsupported kind of FD!Node',
			kind  <- #WARNING
		)
	 do {
	 	r.refSetValue('object', node);
	 }
		
}