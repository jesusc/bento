-- @path FD=/bento.examples.flow_diagrams.petrinets/metamodels/flow_concept.ecore
-- @path PN=/bento.examples.flow_diagrams.petrinets/metamodels/petri_nets.ecore
module flow2pn;
create OUT : PN from IN : BPMN;

-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context BPMN!FlowNode def: oclAsType(t : OclAny) : OclAny =
 self;

helper context BPMN!FlowNode def: typeName : String =
 self.oclType().name;

helper context BPMN!FlowNode def: isTask : Boolean =
 let __unique_id__ : OclAny = self in
 __unique_id__.oclIsKindOf(BPMN!Task) or __unique_id__.oclIsKindOf(BPMN!StartEvent);

helper context BPMN!FlowNode def: isFinalTask : Boolean =
 self.oclIsKindOf(BPMN!EndEvent);

helper context BPMN!FlowNode def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  self.oclAsType(BPMN!EndEvent).isTerminating
 else
  false
 endif;

helper context BPMN!FlowNode def: isParallelSplit : Boolean =
 let __unique_id___2 : OclAny = self in
 if __unique_id___2.oclIsKindOf(BPMN!ParallelGateway) then
  __unique_id___2.ParallelSplit__filter__
 else
  false
 endif;

helper context BPMN!FlowNode def: isSynchronization : Boolean =
 let __unique_id___3 : OclAny = self in
 if __unique_id___3.oclIsKindOf(BPMN!ParallelGateway) then
  __unique_id___3.Synchronization__filter__
 else
  false
 endif;

helper context BPMN!FlowNode def: isExclusiveChoice : Boolean =
 let __unique_id___4 : OclAny = self in
 if __unique_id___4.oclIsKindOf(BPMN!Gateway) then
  __unique_id___4.ExclusiveChoice__filter__
 else
  false
 endif;

helper context BPMN!FlowNode def: isSimpleMerge : Boolean =
 let __unique_id___5 : OclAny = self in
 if __unique_id___5.oclIsKindOf(BPMN!InclusiveGateway) then
  __unique_id___5.SimpleMerge__filter__
 else
  false
 endif;

helper context BPMN!FlowNode def: isMultiChoice : Boolean =
 let __unique_id___6 : OclAny = self in
 if __unique_id___6.oclIsKindOf(BPMN!InclusiveGateway) then
  __unique_id___6.MultiChoice__filter__
 else
  false
 endif;

helper context BPMN!FlowNode def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context BPMN!FlowNode def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context BPMN!FlowNode def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context BPMN!FlowNode def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context BPMN!FlowNode def: parentFlowDiagram : BPMN!Process =
 BPMN!Process.allInstances()->first();

helper context BPMN!SequenceFlow def: parentFlowDiagram : BPMN!Process =
 BPMN!Process.allInstances()->first();

helper context Integer def: pow(m : Integer) : Integer =
 if m > 1 then
  self * self.pow(m - 1)
 else
  self
 endif; -- n^m
-- n^m
helper context Integer def: toSequence() : Sequence(Integer) =
 if self <= 0 then
  Sequence {}
 else
  Sequence {self}.union((self - 1).toSequence())
 endif; -- Sequence{1, 2..., n}
-- Sequence{1, 2..., n}
helper context Integer def: choices() : Sequence(Sequence(Boolean)) =
 if self > 1 then
  (self - 1).choices()->collect(n |
   n->append(true)
  )->union((self - 1).choices()->collect(n |
   n->append(false)
  ))
 else
  Sequence {Sequence {true}, Sequence {false}}
 endif;

helper context BPMN!InclusiveGateway def: nodeGenerator : Sequence(TupleType(source : BPMN!FlowNode, num : Integer)) =
 (2.pow(self.outs->size()) - 1).toSequence()->iterate(n; result : Sequence(TupleType(source : BPMN!FlowNode, num : Integer)) = Sequence {} |
  let tuple : OclAny = Tuple {source : BPMN!FlowNode = self, num : Integer = n} in
  result.including(tuple)
 );

rule create_transition(source : BPMN!FlowNode, num : Integer) {
 using
 {
  choices : Sequence(Boolean) = source.outs->size().choices()->at(num);
  icontrol : Sequence(OclAny) = source.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if source.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- source.typeName + ' ' + num,
   in <- icontrol.append(source),
   out <- source.outs->size().toSequence()->iterate(i; result : Sequence(BPMN!FlowNode) = Sequence {} |
    if choices->at(i) = true then
     result->append(if source.outs->at(i).out.toPlaceAsInput then
      source.outs.at(i).out
     else
      source.outs.at(i)
     endif)
    else
     result
    endif
   ).append(ocontrol)
  )
 do {
  -- This is important, it is the result value...
  -- This is important, it is the result value...
  transition;
 }
} -- if the diagram contains terminating final tasks, we add a place 'Control' connected to all transitions in the net as follows:
--   1) with an arc, if the transition is connected to a terminating final task
--   2) with a loop, if the transition is not connected to a terminating final task
-- if the diagram contains terminating final tasks, we add a place 'Control' connected to all transitions in the net as follows:
--   1) with an arc, if the transition is connected to a terminating final task
--   2) with a loop, if the transition is not connected to a terminating final task
helper context BPMN!SequenceFlow def: isConnectedToTerminating : Boolean =
 self.out.isTerminatingTask;

helper context BPMN!FlowNode def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context BPMN!Process def: control : Sequence(PN!Place) =
 if self.nodes->exists(n |
  n.isTerminatingTask
 ) then
  Sequence {thisModule.get_control(self)}
 else
  Sequence {}
 endif;

unique lazy rule get_control {
 from
  flow : BPMN!Process
 to
  place : PN!Place (
   name <- 'Control',
   tokens <- 1
  )
} -- BUILDING BLOCKS ---------------------------------------------------------------------------------------------
-- the flow diagram is transformed into a Petri net 
-- BUILDING BLOCKS ---------------------------------------------------------------------------------------------
-- the flow diagram is transformed into a Petri net 
rule flowdiagram {
 from
  flow : BPMN!Process
 to
  net : PN!PetriNet (
   elems <- flow.nodes.append(flow.edges.append(flow.nodes->select(n |
    n.isSimpleMerge
   )->collect(n |
    thisModule.create_transition(n, 1)
   ))).union(flow.nodes->select(n |
    n.isMultiChoice
   )->collect(n |
    n.nodeGenerator
   )->flatten()->collect(n |
    thisModule.create_transition(n.source, n.num)
   )).append(flow.control)->flatten()
  )
} -- each task is transformed into a place, with 1 token if it is initial
-- each task is transformed into a place, with 1 token if it is initial
rule task {
 from
  task : BPMN!Task
 to
  place : PN!Place (
   name <- if task.isInitial then
    'Initial: '.concat(task.name)
   else
    task.name
   endif,
   tokens <- if task.isInitial then
    1
   else
    0
   endif
  )
} -- each final task is transformed into a place
-- each final task is transformed into a place
rule finaltask {
 from
  task : BPMN!EndEvent
 to
  place : PN!Place (
   --name   <- if task.isTerminating then 'Final Terminating' else 'Final' endif,
   name <- 'Final' + if task.isTerminating then
    ' Terminating'
   else
    ''
   endif + if task.isMandatory then
    ' Mandatory'
   else
    ''
   endif,
   tokens <- 0
  )
} -- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
-- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
rule synchronization_all {
 from
  synch : BPMN!FlowNode
  (
   synch.isParallelSplit or synch.isSynchronization
  )
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
} -- each exclusive choice is transformed into a place
-- each exclusive choice is transformed into a place
rule exclusive_choice {
 from
  choice : BPMN!Gateway
  (
   choice.ExclusiveChoice__filter__
  )
 to
  place : PN!Place (
   name <- choice.typeName,
   tokens <- 0
  )
} -- each simple merge is transformed into a place connected to a transition;
-- the transition is created by rule create_transition, invoked from rule flow_diagram
-- each simple merge is transformed into a place connected to a transition;
-- the transition is created by rule create_transition, invoked from rule flow_diagram
rule simple_merge {
 from
  merge : BPMN!InclusiveGateway
  (
   merge.SimpleMerge__filter__
  )
 to
  place : PN!Place (
   name <- merge.typeName,
   tokens <- 0
  )
} -- each multi choice is transformed into a place connected to (2^n)-1 transitions;
-- the transitions are created by rule create_transition, invoked from rule flow_diagram
-- each multi choice is transformed into a place connected to (2^n)-1 transitions;
-- the transitions are created by rule create_transition, invoked from rule flow_diagram
rule multi_choice {
 from
  choice : BPMN!InclusiveGateway
  (
   choice.MultiChoice__filter__
  )
 to
  place : PN!Place (
   name <- choice.typeName,
   tokens <- 0
  )
} -- INTERCONNECTIONS --------------------------------------------------------------------------------------------
-- flow edges connecting nodes that are transformed into places, 
-- are transformed into transitions
-- INTERCONNECTIONS --------------------------------------------------------------------------------------------
-- flow edges connecting nodes that are transformed into places, 
-- are transformed into transitions
rule place_place {
 from
  edge : BPMN!SequenceFlow
  (
   edge.in.toPlaceAsOutput and edge.out.toPlaceAsInput
  )
 using
 {
  icontrol : Sequence(OclAny) = edge.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if edge.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   in <- icontrol.append(edge.in),
   out <- ocontrol.append(edge.out)
  )
} -- flow edges connecting nodes that are transformed into transitions, 
-- are transformed into places
-- flow edges connecting nodes that are transformed into transitions, 
-- are transformed into places
rule transition_transition {
 from
  edge : BPMN!SequenceFlow
  (
   edge.in.toTransitionAsOutput and edge.out.toTransitionAsInput
  )
 -- should we differentiate transitionAsOutput when SimpleMerge???
 -- should we differentiate transitionAsOutput when SimpleMerge???
 to
  place : PN!Place (
   name <- edge.in.typeName + '-' + edge.out.typeName,
   tokens <- 0
  )
}

helper context BPMN!Gateway def: ExclusiveChoice__filter__ : Boolean =
 if self.oclIsTypeOf(BPMN!EventBasedGateway) then
  self.eventGatewayType = #exclusive
 else
  self.oclIsTypeOf(BPMN!ExclusiveGateway)
 endif;

helper context BPMN!ParallelGateway def: ParallelSplit__filter__ : Boolean =
 self.incoming.size() = 1 and self.outgoing.size() > 1;

helper context BPMN!ParallelGateway def: Synchronization__filter__ : Boolean =
 self.incoming.size() > 1 and self.outgoing.size() = 1;

helper context BPMN!InclusiveGateway def: SimpleMerge__filter__ : Boolean =
 self.incoming.size() > 1 and self.outgoing.size() = 1;

helper context BPMN!InclusiveGateway def: MultiChoice__filter__ : Boolean =
 self.incoming.size() = 1 and self.outgoing.size() > 1;

-- each task is transformed into a place, with 1 token if it is initial
rule task_StartEvent {
 from
  task : BPMN!StartEvent
 to
  place : PN!Place (
   name <- if task.isInitial then
    'Initial: '.concat(task.name)
   else
    task.name
   endif,
   tokens <- if task.isInitial then
    1
   else
    0
   endif
  )
} -- each final task is transformed into a place
helper context BPMN!FlowNode def: outs : OclAny =
 self.outgoing;

helper context BPMN!FlowNode def: ins : OclAny =
 self.incoming;

helper context BPMN!SequenceFlow def: "in" : OclAny =
 self.sourceRef;

helper context BPMN!SequenceFlow def: out : OclAny =
 self.targetRef;

helper context BPMN!Process def: nodes : OclAny =
 self.flowElements->select(f |
  f.oclIsKindOf(BPMN!FlowNode)
 );

helper context BPMN!Process def: edges : OclAny =
 self.flowElements->select(f |
  f.oclIsKindOf(BPMN!SequenceFlow)
 );

helper context BPMN!Task def: isInitial : OclAny =
 false;

helper context BPMN!StartEvent def: isInitial : OclAny =
 true;

helper context BPMN!EndEvent def: isTerminating : OclAny =
 false;

helper context BPMN!EndEvent def: isMandatory : OclAny =
 false;
