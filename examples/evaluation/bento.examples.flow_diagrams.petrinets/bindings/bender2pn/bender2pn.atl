-- @path FD=/bento.examples.flow_diagrams.petrinets/metamodels/flow_concept.ecore
-- @path PN=/bento.examples.flow_diagrams.petrinets/metamodels/petri_nets.ecore
module flow2pn;
create OUT : PN from IN : BENDER;

-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context BENDER!State def: oclAsType(t : OclAny) : OclAny =
 self;

helper context BENDER!State def: typeName : String =
 self.oclType().name;

helper context BENDER!State def: isTask : Boolean =
 self.oclIsKindOf(BENDER!State);

helper context BENDER!State def: isFinalTask : Boolean =
 self.oclIsKindOf(BENDER!FinalState);

helper context BENDER!State def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  self.oclAsType(BENDER!FinalState).isTerminating
 else
  false
 endif;

helper context BENDER!State def: isParallelSplit : Boolean =
 false;

helper context BENDER!State def: isSynchronization : Boolean =
 false;

helper context BENDER!State def: isExclusiveChoice : Boolean =
 self.oclIsKindOf(BENDER!Collected);

helper context BENDER!State def: isSimpleMerge : Boolean =
 false;

helper context BENDER!State def: isMultiChoice : Boolean =
 false;

helper context BENDER!State def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context BENDER!State def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context BENDER!State def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context BENDER!State def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context BENDER!State def: parentFlowDiagram : BENDER!StateMachine =
 BENDER!StateMachine.allInstances()->first();

helper context BENDER!Transition def: parentFlowDiagram : BENDER!StateMachine =
 BENDER!StateMachine.allInstances()->first();

helper context Integer def: pow(m : Integer) : Integer =
 if m > 1 then
  self * self.pow(m - 1)
 else
  self
 endif; -- n^m
-- n^m
helper context Integer def: toSequence() : Sequence(Integer) =
 if self <= 0 then
  Sequence {}
 else
  Sequence {self}.union((self - 1).toSequence())
 endif; -- Sequence{1, 2..., n}
-- Sequence{1, 2..., n}
helper context Integer def: choices() : Sequence(Sequence(Boolean)) =
 if self > 1 then
  (self - 1).choices()->collect(n |
   n->append(true)
  )->union((self - 1).choices()->collect(n |
   n->append(false)
  ))
 else
  Sequence {Sequence {true}, Sequence {false}}
 endif;

rule create_transition(source : BENDER!State, num : Integer) {
 using
 {
  choices : Sequence(Boolean) = source.outs->size().choices()->at(num);
  icontrol : Sequence(OclAny) = source.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if source.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- source.typeName + ' ' + num,
   in <- icontrol.append(source),
   out <- source.outs->size().toSequence()->iterate(i; result : Sequence(BENDER!State) = Sequence {} |
    if choices->at(i) = true then
     result->append(if source.outs->at(i).out.toPlaceAsInput then
      source.outs.at(i).out
     else
      source.outs.at(i)
     endif)
    else
     result
    endif
   ).append(ocontrol)
  )
 do {
  -- This is important, it is the result value...
  -- This is important, it is the result value...
  transition;
 }
} -- if the diagram contains terminating final tasks, we add a place 'Control' connected to all transitions in the net as follows:
--   1) with an arc, if the transition is connected to a terminating final task
--   2) with a loop, if the transition is not connected to a terminating final task
-- if the diagram contains terminating final tasks, we add a place 'Control' connected to all transitions in the net as follows:
--   1) with an arc, if the transition is connected to a terminating final task
--   2) with a loop, if the transition is not connected to a terminating final task
helper context BENDER!Transition def: isConnectedToTerminating : Boolean =
 self.out.isTerminatingTask;

helper context BENDER!State def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context BENDER!StateMachine def: control : Sequence(PN!Place) =
 if self.nodes->exists(n |
  n.isTerminatingTask
 ) then
  Sequence {thisModule.get_control(self)}
 else
  Sequence {}
 endif;

unique lazy rule get_control {
 from
  flow : BENDER!StateMachine
 to
  place : PN!Place (
   name <- 'Control',
   tokens <- 1
  )
} -- BUILDING BLOCKS ---------------------------------------------------------------------------------------------
-- the flow diagram is transformed into a Petri net 
-- BUILDING BLOCKS ---------------------------------------------------------------------------------------------
-- the flow diagram is transformed into a Petri net 
rule flowdiagram {
 from
  flow : BENDER!StateMachine
 to
  net : PN!PetriNet (
   elems <- flow.nodes.append(flow.edges.append(flow.nodes->select(n |
    n.isSimpleMerge
   )->collect(n |
    thisModule.create_transition(n, 1)
   ))).union(flow.nodes->select(n |
    n.isMultiChoice
   )->collect(n |
    n.nodeGenerator
   )->flatten()->collect(n |
    thisModule.create_transition(n.source, n.num)
   )).append(flow.control)->flatten()
  )
} -- each task is transformed into a place, with 1 token if it is initial
-- Rule from task
unique lazy rule task {
 from
  task : BENDER!State
 to
  place : PN!Place (
   name <- if task.isInitial then
    'Initial: '.concat(task.name)
   else
    task.name
   endif,
   tokens <- if task.isInitial then
    1
   else
    0
   endif
  )
}

-- each final task is transformed into a place
rule finaltask {
 from
  task : BENDER!FinalState
 to
  place : PN!Place (
   --name   <- if task.isTerminating then 'Final Terminating' else 'Final' endif,
   name <- 'Final' + if task.isTerminating then
    ' Terminating'
   else
    ''
   endif + if task.isMandatory then
    ' Mandatory'
   else
    ''
   endif,
   tokens <- 0
  )
} -- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
-- Rule from synchronization_all
unique lazy rule synchronization_all {
 from
  synch : BENDER!State
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
}

-- Rule from exclusive_choice
unique lazy rule exclusive_choice {
 from
  choice : BENDER!Collected
 to
  place : PN!Place (
   name <- choice.typeName,
   tokens <- 0
  )
}

-- Rule from place_place
unique lazy rule place_place {
 from
  edge : BENDER!Transition
 using
 {
  icontrol : Sequence(OclAny) = edge.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if edge.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   in <- icontrol.append(edge.in),
   out <- ocontrol.append(edge.out)
  )
}

-- Rule from transition_transition
unique lazy rule transition_transition {
 from
  edge : BENDER!Transition
 -- should we differentiate transitionAsOutput when SimpleMerge???
 -- should we differentiate transitionAsOutput when SimpleMerge???
 to
  place : PN!Place (
   name <- edge.in.typeName + '-' + edge.out.typeName,
   tokens <- 0
  )
}

helper def: synchronization_all__filter__(synch : OclAny) : Boolean =
 synch.isParallelSplit or synch.isSynchronization;

helper def: transition_transition__filter__(edge : OclAny) : Boolean =
 edge.in.toTransitionAsOutput and edge.out.toTransitionAsInput;

helper def: place_place__filter__(edge : OclAny) : Boolean =
 edge.in.toPlaceAsOutput and edge.out.toPlaceAsInput;

endpoint rule Rule_To__ForceTransformation() {
 using
 {
  synchronization_all_varToForceEvaluation : OclAny = BENDER!State.allInstances()->collect(i |
   if thisModule.synchronization_all__filter__(i) then
    thisModule.synchronization_all(i)
   else
    i
   endif
  );
  exclusive_choice_varToForceEvaluation : OclAny = BENDER!Collected.allInstances()->collect(i |
   if true then
    thisModule.exclusive_choice(i)
   else
    i
   endif
  );
  task_varToForceEvaluation : OclAny = BENDER!State.allInstances()->collect(i |
   if true then
    thisModule.task(i)
   else
    i
   endif
  );
  transition_transition_varToForceEvaluation : OclAny = BENDER!Transition.allInstances()->collect(i |
   if thisModule.transition_transition__filter__(i) then
    thisModule.transition_transition(i)
   else
    i
   endif
  );
  place_place_varToForceEvaluation : OclAny = BENDER!Transition.allInstances()->collect(i |
   if thisModule.place_place__filter__(i) then
    thisModule.place_place(i)
   else
    i
   endif
  );
 }
}

helper def: __convertToSequence__(obj : OclAny) : OclAny =
 if obj = OclUndefined then
  Sequence {}
 else
  Sequence {obj}->flatten()
 endif;

-- Rule from synchronization_all
unique lazy rule synchronization_all_Collected {
 from
  synch : BENDER!Collected
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
}

-- Rule from place_place
unique lazy rule place_place_Branch {
 from
  edge : BENDER!Branch
 using
 {
  icontrol : Sequence(OclAny) = edge.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if edge.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   in <- icontrol.append(edge.in),
   out <- ocontrol.append(edge.out)
  )
}

-- Rule from transition_transition
unique lazy rule transition_transition_Branch {
 from
  edge : BENDER!Branch
 -- should we differentiate transitionAsOutput when SimpleMerge???
 -- should we differentiate transitionAsOutput when SimpleMerge???
 to
  place : PN!Place (
   name <- edge.in.typeName + '-' + edge.out.typeName,
   tokens <- 0
  )
}

-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context BENDER!Collected def: oclAsType(t : OclAny) : OclAny =
 self;

helper context BENDER!Collected def: typeName : String =
 self.oclType().name;

helper context BENDER!Collected def: isTask : Boolean =
 self.oclIsKindOf(BENDER!State);

helper context BENDER!Collected def: isFinalTask : Boolean =
 self.oclIsKindOf(BENDER!FinalState);

helper context BENDER!Collected def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  self.oclAsType(BENDER!FinalState).isTerminating
 else
  false
 endif;

helper context BENDER!Collected def: isParallelSplit : Boolean =
 false;

helper context BENDER!Collected def: isSynchronization : Boolean =
 false;

helper context BENDER!Collected def: isExclusiveChoice : Boolean =
 self.oclIsKindOf(BENDER!Collected);

helper context BENDER!Collected def: isSimpleMerge : Boolean =
 false;

helper context BENDER!Collected def: isMultiChoice : Boolean =
 false;

helper context BENDER!Collected def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context BENDER!Collected def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context BENDER!Collected def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context BENDER!Collected def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context BENDER!Collected def: parentFlowDiagram : BENDER!StateMachine =
 BENDER!StateMachine.allInstances()->first();

helper context BENDER!Branch def: parentFlowDiagram : BENDER!StateMachine =
 BENDER!StateMachine.allInstances()->first();

-- if the diagram contains terminating final tasks, we add a place 'Control' connected to all transitions in the net as follows:
--   1) with an arc, if the transition is connected to a terminating final task
--   2) with a loop, if the transition is not connected to a terminating final task
helper context BENDER!Branch def: isConnectedToTerminating : Boolean =
 self.out.isTerminatingTask;

helper context BENDER!Collected def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context BENDER!StateMachine def: nodes : OclAny =
 self.states;

helper context BENDER!Transition def: "in" : OclAny =
 self.src;

helper context BENDER!State def: name : OclAny =
 self.nombre;

helper context BENDER!Collected def: outs : OclAny =
 self.branches;

helper context BENDER!StateMachine def: edges : OclAny =
 self.states->collect(s |
  s.outs
 ).flatten();

helper context BENDER!Transition def: out : OclAny =
 if self.oclIsKindOf(BENDER!Collected) then
  self
 else
  self.defaultTar
 endif;

helper context BENDER!Branch def: "in" : OclAny =
 self.refImmediateComposite;

helper context BENDER!State def: ins : OclAny =
 BENDER!Transition.allInstances()->select(t |
  t.defaultTar = self
 );

helper context BENDER!Collected def: ins : OclAny =
 Sequence {self};

helper context BENDER!State def: isInitial : OclAny =
 self.oclIsKindOf(BENDER!InitialState);

helper context BENDER!Collected def: isInitial : OclAny =
 false;

helper context BENDER!FinalState def: isTerminating : OclAny =
 false;

helper context BENDER!FinalState def: isMandatory : OclAny =
 false;
