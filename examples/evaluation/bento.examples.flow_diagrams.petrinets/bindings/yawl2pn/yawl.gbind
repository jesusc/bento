binding epc {  
	concept   FD   : "platform:/resource/bento.examples.flow_diagrams.petrinets/metamodels/flow_concept.ecore"
	metamodel YAWL : "platform:/resource/bento.examples.flow_diagrams.petrinets/bindings/yawl2pn/yawl.ecore"
	
	class YawlEdge {
		ref src : ProcessControlElement
		ref tgt : ProcessControlElement
	} init = YAWL!ProcessControlElement.allInstances()->collect(src| src.flowsOutOf->collect(tgt | 
		Tuple { type__ = 'YawlEdge', src = src, tgt = tgt
			-- Needed for the moment
			--, in = src,
			, out = tgt, "in" = src
		 }
	))->flatten()
	
	class FlowDiagram     to Decomposition -- it can also be Specification 
	class Node            to ProcessControlElement
	class Task            to Task, InputCondition when 
		if self.oclIsKindOf(YAWL!Task) then self.splitType = #NORMAL and self.joinType = #NORMAL else true endif
	class FinalTask       to OutputCondition
	class ParallelSplit   to Task when self.splitType = #AND
	class Synchronization to Task when self.joinType = #AND 
	class ExclusiveChoice to Task when self.splitType = #XOR
	class SimpleMerge     to Task when self.joinType = #XOR  
	class MultiChoice     to Task when self.splitType = #OR 
		
	class FlowEdge to virtual YawlEdge 	
	
	feature FlowDiagram.nodes is processControlElements 
		
	feature FlowDiagram.isFinalMandatory = true
	
	-- Involved in the virtual class mapping
	feature FlowDiagram.edges = 
		self.YawlEdge_AllInstances->select(y | self.processControlElements->exists(p | p = y.src ))	
	feature Node.outs = self.YawlEdge_AllInstances->select(y | y.src = self) 
	feature Node.ins  = self.YawlEdge_AllInstances->select(y | y.tgt = self) 
	feature FlowEdge."in"  is src
	feature FlowEdge."out" is tgt
		
	feature Task[Task].name is name
	feature Task[InputCondition].name = 'input-condition'

	feature Task[Task].isInitial = false -- self.oclIsKindOf(YAWL!InputCondition)
	feature Task[InputCondition].isInitial = true -- self.oclIsKindOf(YAWL!InputCondition)
	feature FinalTask.isTerminating = true
	feature FinalTask.isMandatory = true

    
}