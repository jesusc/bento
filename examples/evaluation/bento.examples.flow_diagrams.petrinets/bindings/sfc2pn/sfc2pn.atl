-- @path FD=/bento.examples.flow_diagrams.petrinets/metamodels/flow_concept.ecore
-- @path PN=/bento.examples.flow_diagrams.petrinets/metamodels/petri_nets.ecore
module flow2pn;
create OUT : PN from IN : SFC;

-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context SFC!StepType def: oclAsType(t : OclAny) : OclAny =
 self;

helper context SFC!StepType def: typeName : String =
 self.oclType().name;

helper context SFC!StepType def: isTask : Boolean =
 let __unique_id__ : OclAny = self in
 __unique_id__.oclIsKindOf(SFC!StepType) or __unique_id__.oclIsKindOf(SFC!TransitionType1);

helper context SFC!StepType def: isFinalTask : Boolean =
 false;

helper context SFC!StepType def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  -- self.oclAsType(SFC!NONE).isTerminating
 	false
 else
  false
 endif;

helper context SFC!StepType def: isParallelSplit : Boolean =
 self.oclIsKindOf(SFC!SimultaneousDivergenceType);

helper context SFC!StepType def: isSynchronization : Boolean =
 self.oclIsKindOf(SFC!SimultaneousConvergenceType);

helper context SFC!StepType def: isExclusiveChoice : Boolean =
 self.oclIsKindOf(SFC!SelectionDivergenceType);

helper context SFC!StepType def: isSimpleMerge : Boolean =
 self.oclIsKindOf(SFC!SelectionConvergenceType);

helper context SFC!StepType def: isMultiChoice : Boolean =
 false;

helper context SFC!StepType def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!StepType def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context SFC!StepType def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context SFC!StepType def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!StepType def: parentFlowDiagram : SFC!SFCType1 =
 SFC!SFCType1.allInstances()->first();

helper context SFC!Connection def: parentFlowDiagram : SFC!SFCType1 =
 SFC!SFCType1.allInstances()->first();

helper context Integer def: pow(m : Integer) : Integer =
 if m > 1 then
  self * self.pow(m - 1)
 else
  self
 endif; -- n^m
-- n^m
helper context Integer def: toSequence() : Sequence(Integer) =
 if self <= 0 then
  Sequence {}
 else
  Sequence {self}.union((self - 1).toSequence())
 endif; -- Sequence{1, 2..., n}
-- Sequence{1, 2..., n}
helper context Integer def: choices() : Sequence(Sequence(Boolean)) =
 if self > 1 then
  (self - 1).choices()->collect(n |
   n->append(true)
  )->union((self - 1).choices()->collect(n |
   n->append(false)
  ))
 else
  Sequence {Sequence {true}, Sequence {false}}
 endif;

rule create_transition(source : SFC!StepType, num : Integer) {
 using
 {
  choices : Sequence(Boolean) = source.outs->size().choices()->at(num);
  icontrol : Sequence(OclAny) = source.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if source.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- source.typeName + ' ' + num,
   in <- icontrol.append(source),
   out <- source.outs->size().toSequence()->iterate(i; result : Sequence(SFC!StepType) = Sequence {} |
    if choices->at(i) = true then
     result->append(if source.outs->at(i).out.toPlaceAsInput then
      source.outs.at(i).out
     else
      source.outs.at(i)
     endif)
    else
     result
    endif
   ).append(ocontrol)
  )
 do {
  -- This is important, it is the result value...
  -- This is important, it is the result value...
  transition;
 }
} -- if the diagram contains terminating final tasks, we add a place 'Control' connected to all transitions in the net as follows:
--   1) with an arc, if the transition is connected to a terminating final task
--   2) with a loop, if the transition is not connected to a terminating final task
-- if the diagram contains terminating final tasks, we add a place 'Control' connected to all transitions in the net as follows:
--   1) with an arc, if the transition is connected to a terminating final task
--   2) with a loop, if the transition is not connected to a terminating final task
helper context SFC!Connection def: isConnectedToTerminating : Boolean =
 self.out.isTerminatingTask;

helper context SFC!StepType def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context SFC!SFCType1 def: control : Sequence(PN!Place) =
 if self.nodes->exists(n |
  n.isTerminatingTask
 ) then
  Sequence {thisModule.get_control(self)}
 else
  Sequence {}
 endif;

unique lazy rule get_control {
 from
  flow : SFC!SFCType1
 to
  place : PN!Place (
   name <- 'Control',
   tokens <- 1
  )
} -- BUILDING BLOCKS ---------------------------------------------------------------------------------------------
-- the flow diagram is transformed into a Petri net 
-- BUILDING BLOCKS ---------------------------------------------------------------------------------------------
-- the flow diagram is transformed into a Petri net 
rule flowdiagram {
 from
  flow : SFC!SFCType1
 to
  net : PN!PetriNet (
   elems <- flow.nodes.append(flow.edges.append(flow.nodes->select(n |
    n.isSimpleMerge
   )->collect(n |
    thisModule.create_transition(n, 1)
   ))).union(flow.nodes->select(n |
    n.isMultiChoice
   )->collect(n |
    n.nodeGenerator
   )->flatten()->collect(n |
    thisModule.create_transition(n.source, n.num)
   )).append(flow.control)->flatten()
  )
} -- each task is transformed into a place, with 1 token if it is initial
-- each task is transformed into a place, with 1 token if it is initial
rule task {
 from
  task : SFC!StepType
 to
  place : PN!Place (
   name <- if task.isInitial then
    'Initial: '.concat(task.name)
   else
    task.name
   endif,
   tokens <- if task.isInitial then
    1
   else
    0
   endif
  )
} -- each final task is transformed into a place
-- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
rule synchronization_all {
 from
  synch : SFC!StepType
  (
   synch.isParallelSplit or synch.isSynchronization
  )
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
} -- each exclusive choice is transformed into a place
-- each exclusive choice is transformed into a place
rule exclusive_choice {
 from
  choice : SFC!SelectionDivergenceType
 to
  place : PN!Place (
   name <- choice.typeName,
   tokens <- 0
  )
} -- each simple merge is transformed into a place connected to a transition;
-- the transition is created by rule create_transition, invoked from rule flow_diagram
-- each simple merge is transformed into a place connected to a transition;
-- the transition is created by rule create_transition, invoked from rule flow_diagram
rule simple_merge {
 from
  merge : SFC!SelectionConvergenceType
 to
  place : PN!Place (
   name <- merge.typeName,
   tokens <- 0
  )
} -- each multi choice is transformed into a place connected to (2^n)-1 transitions;
-- the transitions are created by rule create_transition, invoked from rule flow_diagram
-- INTERCONNECTIONS --------------------------------------------------------------------------------------------
-- flow edges connecting nodes that are transformed into places, 
-- are transformed into transitions
rule place_place {
 from
  edge : SFC!Connection
  (
   edge.in.toPlaceAsOutput and edge.out.toPlaceAsInput
  )
 using
 {
  icontrol : Sequence(OclAny) = edge.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if edge.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   in <- icontrol.append(edge.in),
   out <- ocontrol.append(edge.out)
  )
} -- flow edges connecting nodes that are transformed into transitions, 
-- are transformed into places
-- flow edges connecting nodes that are transformed into transitions, 
-- are transformed into places
rule transition_transition {
 from
  edge : SFC!Connection
  (
   edge.in.toTransitionAsOutput and edge.out.toTransitionAsInput
  )
 -- should we differentiate transitionAsOutput when SimpleMerge???
 -- should we differentiate transitionAsOutput when SimpleMerge???
 to
  place : PN!Place (
   name <- edge.in.typeName + '-' + edge.out.typeName,
   tokens <- 0
  )
}

-- each task is transformed into a place, with 1 token if it is initial
rule task_TransitionType1 {
 from
  task : SFC!TransitionType1
 to
  place : PN!Place (
   name <- if task.isInitial then
    'Initial: '.concat(task.name)
   else
    task.name
   endif,
   tokens <- if task.isInitial then
    1
   else
    0
   endif
  )
} -- each final task is transformed into a place
-- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
rule synchronization_all_TransitionType1 {
 from
  synch : SFC!TransitionType1
  (
   synch.isParallelSplit or synch.isSynchronization
  )
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
} -- each exclusive choice is transformed into a place
-- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
rule synchronization_all_SelectionDivergenceType {
 from
  synch : SFC!SelectionDivergenceType
  (
   synch.isParallelSplit or synch.isSynchronization
  )
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
} -- each exclusive choice is transformed into a place
-- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
rule synchronization_all_SelectionConvergenceType {
 from
  synch : SFC!SelectionConvergenceType
  (
   synch.isParallelSplit or synch.isSynchronization
  )
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
} -- each exclusive choice is transformed into a place
-- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
rule synchronization_all_SimultaneousDivergenceType {
 from
  synch : SFC!SimultaneousDivergenceType
  (
   synch.isParallelSplit or synch.isSynchronization
  )
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
} -- each exclusive choice is transformed into a place
-- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
rule synchronization_all_SimultaneousConvergenceType {
 from
  synch : SFC!SimultaneousConvergenceType
  (
   synch.isParallelSplit or synch.isSynchronization
  )
 using
 {
  icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control;
  ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then
   Sequence {}
  else
   icontrol
  endif;
 }
 to
  transition : PN!Transition (
   name <- synch.typeName,
   in <- synch.ins->select(e |
    e.in.toPlaceAsOutput
   )->collect(e |
    e.in
   ) -- connect to input places
   ->union(synch.ins->select(e |
    e.in.toTransitionAsOutput
   )) -- connect to input transitions
   .append(icontrol),
   -- connect to control place   				
   out <- synch.outs->select(e |
    e.out.toPlaceAsInput
   )->collect(e |
    e.out
   )->union(synch.outs->select(e |
    e.out.toTransitionAsInput
   )).append(ocontrol)
  )
} -- each exclusive choice is transformed into a place
-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context SFC!TransitionType1 def: oclAsType(t : OclAny) : OclAny =
 self;

-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context SFC!SelectionDivergenceType def: oclAsType(t : OclAny) : OclAny =
 self;

-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context SFC!SelectionConvergenceType def: oclAsType(t : OclAny) : OclAny =
 self;

-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context SFC!SimultaneousDivergenceType def: oclAsType(t : OclAny) : OclAny =
 self;

-- This is needed to emulate the casting... and facilitate life to the typechecker (not sure if it works generically for OclAny)
--helper context OclAny def: oclAsType(t : OclAny)  : OclAny  = self; 
helper context SFC!SimultaneousConvergenceType def: oclAsType(t : OclAny) : OclAny =
 self;

helper context SFC!TransitionType1 def: typeName : String =
 self.oclType().name;

helper context SFC!SelectionDivergenceType def: typeName : String =
 self.oclType().name;

helper context SFC!SelectionConvergenceType def: typeName : String =
 self.oclType().name;

helper context SFC!SimultaneousDivergenceType def: typeName : String =
 self.oclType().name;

helper context SFC!SimultaneousConvergenceType def: typeName : String =
 self.oclType().name;

helper context SFC!TransitionType1 def: isTask : Boolean =
 let __unique_id__ : OclAny = self in
 __unique_id__.oclIsKindOf(SFC!StepType) or __unique_id__.oclIsKindOf(SFC!TransitionType1);

helper context SFC!SelectionDivergenceType def: isTask : Boolean =
 let __unique_id__ : OclAny = self in
 __unique_id__.oclIsKindOf(SFC!StepType) or __unique_id__.oclIsKindOf(SFC!TransitionType1);

helper context SFC!SelectionConvergenceType def: isTask : Boolean =
 let __unique_id__ : OclAny = self in
 __unique_id__.oclIsKindOf(SFC!StepType) or __unique_id__.oclIsKindOf(SFC!TransitionType1);

helper context SFC!SimultaneousDivergenceType def: isTask : Boolean =
 let __unique_id__ : OclAny = self in
 __unique_id__.oclIsKindOf(SFC!StepType) or __unique_id__.oclIsKindOf(SFC!TransitionType1);

helper context SFC!SimultaneousConvergenceType def: isTask : Boolean =
 let __unique_id__ : OclAny = self in
 __unique_id__.oclIsKindOf(SFC!StepType) or __unique_id__.oclIsKindOf(SFC!TransitionType1);

helper context SFC!TransitionType1 def: isFinalTask : Boolean =
 false;

helper context SFC!SelectionDivergenceType def: isFinalTask : Boolean =
 false;

helper context SFC!SelectionConvergenceType def: isFinalTask : Boolean =
 false;

helper context SFC!SimultaneousDivergenceType def: isFinalTask : Boolean =
 false;

helper context SFC!SimultaneousConvergenceType def: isFinalTask : Boolean =
 false;

helper context SFC!TransitionType1 def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  false -- self.oclAsType(SFC!NONE).isTerminating
 else
  false
 endif;

helper context SFC!SelectionDivergenceType def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  false -- self.oclAsType(SFC!NONE).isTerminating
 else
  false
 endif;

helper context SFC!SelectionConvergenceType def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  false -- self.oclAsType(SFC!NONE).isTerminating
 else
  false
 endif;

helper context SFC!SimultaneousDivergenceType def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  false -- self.oclAsType(SFC!NONE).isTerminating
 else
  false
 endif;

helper context SFC!SimultaneousConvergenceType def: isTerminatingTask : Boolean =
 if self.isFinalTask then
  false -- self.oclAsType(SFC!NONE).isTerminating
 else
  false
 endif;

helper context SFC!TransitionType1 def: isParallelSplit : Boolean =
 self.oclIsKindOf(SFC!SimultaneousDivergenceType);

helper context SFC!SelectionDivergenceType def: isParallelSplit : Boolean =
 self.oclIsKindOf(SFC!SimultaneousDivergenceType);

helper context SFC!SelectionConvergenceType def: isParallelSplit : Boolean =
 self.oclIsKindOf(SFC!SimultaneousDivergenceType);

helper context SFC!SimultaneousDivergenceType def: isParallelSplit : Boolean =
 self.oclIsKindOf(SFC!SimultaneousDivergenceType);

helper context SFC!SimultaneousConvergenceType def: isParallelSplit : Boolean =
 self.oclIsKindOf(SFC!SimultaneousDivergenceType);

helper context SFC!TransitionType1 def: isSynchronization : Boolean =
 self.oclIsKindOf(SFC!SimultaneousConvergenceType);

helper context SFC!SelectionDivergenceType def: isSynchronization : Boolean =
 self.oclIsKindOf(SFC!SimultaneousConvergenceType);

helper context SFC!SelectionConvergenceType def: isSynchronization : Boolean =
 self.oclIsKindOf(SFC!SimultaneousConvergenceType);

helper context SFC!SimultaneousDivergenceType def: isSynchronization : Boolean =
 self.oclIsKindOf(SFC!SimultaneousConvergenceType);

helper context SFC!SimultaneousConvergenceType def: isSynchronization : Boolean =
 self.oclIsKindOf(SFC!SimultaneousConvergenceType);

helper context SFC!TransitionType1 def: isExclusiveChoice : Boolean =
 self.oclIsKindOf(SFC!SelectionDivergenceType);

helper context SFC!SelectionDivergenceType def: isExclusiveChoice : Boolean =
 self.oclIsKindOf(SFC!SelectionDivergenceType);

helper context SFC!SelectionConvergenceType def: isExclusiveChoice : Boolean =
 self.oclIsKindOf(SFC!SelectionDivergenceType);

helper context SFC!SimultaneousDivergenceType def: isExclusiveChoice : Boolean =
 self.oclIsKindOf(SFC!SelectionDivergenceType);

helper context SFC!SimultaneousConvergenceType def: isExclusiveChoice : Boolean =
 self.oclIsKindOf(SFC!SelectionDivergenceType);

helper context SFC!TransitionType1 def: isSimpleMerge : Boolean =
 self.oclIsKindOf(SFC!SelectionConvergenceType);

helper context SFC!SelectionDivergenceType def: isSimpleMerge : Boolean =
 self.oclIsKindOf(SFC!SelectionConvergenceType);

helper context SFC!SelectionConvergenceType def: isSimpleMerge : Boolean =
 self.oclIsKindOf(SFC!SelectionConvergenceType);

helper context SFC!SimultaneousDivergenceType def: isSimpleMerge : Boolean =
 self.oclIsKindOf(SFC!SelectionConvergenceType);

helper context SFC!SimultaneousConvergenceType def: isSimpleMerge : Boolean =
 self.oclIsKindOf(SFC!SelectionConvergenceType);

helper context SFC!TransitionType1 def: isMultiChoice : Boolean =
 false;

helper context SFC!SelectionDivergenceType def: isMultiChoice : Boolean =
 false;

helper context SFC!SelectionConvergenceType def: isMultiChoice : Boolean =
 false;

helper context SFC!SimultaneousDivergenceType def: isMultiChoice : Boolean =
 false;

helper context SFC!SimultaneousConvergenceType def: isMultiChoice : Boolean =
 false;

helper context SFC!TransitionType1 def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!SelectionDivergenceType def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!SelectionConvergenceType def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!SimultaneousDivergenceType def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!SimultaneousConvergenceType def: toPlaceAsInput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!TransitionType1 def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context SFC!SelectionDivergenceType def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context SFC!SelectionConvergenceType def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context SFC!SimultaneousDivergenceType def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context SFC!SimultaneousConvergenceType def: toPlaceAsOutput : Boolean =
 self.isTask or self.isFinalTask or self.isExclusiveChoice;

helper context SFC!TransitionType1 def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context SFC!SelectionDivergenceType def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context SFC!SelectionConvergenceType def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context SFC!SimultaneousDivergenceType def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context SFC!SimultaneousConvergenceType def: toTransitionAsInput : Boolean =
 self.isSynchronization or self.isParallelSplit;

helper context SFC!TransitionType1 def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!SelectionDivergenceType def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!SelectionConvergenceType def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!SimultaneousDivergenceType def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!SimultaneousConvergenceType def: toTransitionAsOutput : Boolean =
 self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context SFC!TransitionType1 def: parentFlowDiagram : SFC!SFCType1 =
 SFC!SFCType1.allInstances()->first();

helper context SFC!SelectionDivergenceType def: parentFlowDiagram : SFC!SFCType1 =
 SFC!SFCType1.allInstances()->first();

helper context SFC!SelectionConvergenceType def: parentFlowDiagram : SFC!SFCType1 =
 SFC!SFCType1.allInstances()->first();

helper context SFC!SimultaneousDivergenceType def: parentFlowDiagram : SFC!SFCType1 =
 SFC!SFCType1.allInstances()->first();

helper context SFC!SimultaneousConvergenceType def: parentFlowDiagram : SFC!SFCType1 =
 SFC!SFCType1.allInstances()->first();

helper context SFC!TransitionType1 def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context SFC!SelectionDivergenceType def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context SFC!SelectionConvergenceType def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context SFC!SimultaneousDivergenceType def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context SFC!SimultaneousConvergenceType def: isConnectedToTerminating : Boolean =
 self.outs->exists(e |
  e.isConnectedToTerminating
 );

helper context SFC!SFCType1 def: nodes : OclAny =
 self.allNodes;

helper context SFC!SFCType1 def: edges : OclAny =
 self.transition;

helper context SFC!Connection def: out : OclAny =
 self.parent;

helper context SFC!StepType def: isInitial : OclAny =
 self.initialStep;

helper context SFC!Connection def: "in" : OclAny =
 SFC!SFCType1.allInstances()->first().allNodes->any(n |
  n.localId = self.refLocalId
 );

helper context SFC!StepType def: "in" : OclAny =
 self.connectionPointIn.connection;

helper context SFC!StepType def: out : OclAny =
 SFC!Connection.allInstances()->select(c |
  c.refLocalId = self.localId
 );

helper context SFC!TransitionType1 def: "in" : OclAny =
 self.connectionPointIn.connection;

helper context SFC!TransitionType1 def: out : OclAny =
 SFC!Connection.allInstances()->select(c |
  c.refLocalId = self.localId
 );

helper context SFC!SelectionDivergenceType def: "in" : OclAny =
 self.connectionPointIn.connection;

helper context SFC!SelectionDivergenceType def: out : OclAny =
 SFC!Connection.allInstances()->select(c |
  c.refLocalId = self.localId
 );

helper context SFC!SelectionConvergenceType def: "in" : OclAny =
 self.connectionPointIn.connection;

helper context SFC!SelectionConvergenceType def: out : OclAny =
 SFC!Connection.allInstances()->select(c |
  c.refLocalId = self.localId
 );

helper context SFC!SimultaneousDivergenceType def: "in" : OclAny =
 self.connectionPointIn.connection;

helper context SFC!SimultaneousDivergenceType def: out : OclAny =
 SFC!Connection.allInstances()->select(c |
  c.refLocalId = self.localId
 );

helper context SFC!SimultaneousConvergenceType def: "in" : OclAny =
 self.connectionPointIn.connection;

helper context SFC!SimultaneousConvergenceType def: out : OclAny =
 SFC!Connection.allInstances()->select(c |
  c.refLocalId = self.localId
 );

helper context SFC!TransitionType1 def: isInitial : OclAny =
 false;

--helper context SFC!NONE def: isTerminating : OclAny =
-- false;

--helper context SFC!NONE def: isMandatory : OclAny =
-- false;

helper context SFC!Connection def: parent : OclAny =
 self.refImmediateComposite().refImmediateComposite();

helper context SFC!SFCType1 def: allNodes : OclAny =
 self.step.union(self.transition).union(self.selectionDivergence).union(self.selectionConvergence).union(self.simultaneousDivergence).union(self.simultaneousConvergence);
