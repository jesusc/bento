binding basicblocks_nqc {  
	concept   IMP : "platform:/resource/bento.examples.basic_blocks/metamodels/BasicBlocks.ecore"
	metamodel NQC : "platform:/resource/bento.examples.basic_blocks/bindings/nqc/NQC.ecore"

	class UnconditionalGoto to GoToStatement
	-- class Goto to GoToStatement
	class Procedure to Function, Subroutine

	class Statement to Statement
	class IfStatement to IfStatement

	feature Procedure[Function].name is Name
	feature Procedure[Subroutine].name is Name
	
	feature UnconditionalGoto.target is JumpLabel
	feature Statement.self_label is Label
	
	
	feature UnconditionalGoto.target_statement  = self.JumpLabel.refImmediateComposite()

	-- Deberia duplicarse en Function y Subroutine
	feature Procedure[Function].statements_ = 	self.Statements->collect(s | 
  		if s.oclIsKindOf(NQC!BlockStatement) then
			s.Statements
		else
			s
		endif)->flatten()

	feature Procedure[Subroutine].statements_ = 	self.Statements->collect(s | 
  		if s.oclIsKindOf(NQC!BlockStatement) then
			s.Statements
		else
			s
		endif)->flatten()

	feature Statement.statementContainer =  let c : OclAny = self.refImmediateComposite() in
 		if c.oclIsKindOf(NQC!BlockStatement) then
			c.refImmediateComposite() 
		else
			c	
		endif

	feature IfStatement.ifStatements_   = self.Consequence.flattenize
	feature IfStatement.elseStatements_ = if self.Alternative.oclIsUndefined() then   
			Sequence { } 
		else 
			self.Alternative.flattenize
		endif

	helper         Statement.flattenize : Sequence(NQC!Statement) = Sequence { self }
	helper BlockStatement.flattenize : Sequence(NQC!Statement) =self.Statements

	-- Holes, which are defined on concrete metaclasses
	helper Expression.behaveAsStatement : Boolean = false

	helper IntegerConstant.toInfo  : String = self.Value.toString()
	helper AssignmentStatement.toInfo : String = self.Variable.toInfo + ' = ' + self.Expression.toInfo
	helper VariableExpression.toInfo : String  = self.Variable.Name
	helper GoToStatement.toInfo : String = 'goto'
	helper IfStatement.toInfo : String = 'if ... { }'
	helper EmptyStatement.toInfo : String = '-'
	helper BinaryExpression.toInfo : String = self.Operand1.toInfo + ' ' + self.Operator + ' ' + self.Operand2.toInfo 
 	helper SubroutineCall.toInfo : String = 'call ' + self.Callee.Name
	helper FunctionCall.toInfo : String = 'fcall ' + self.Callee.Name
}


