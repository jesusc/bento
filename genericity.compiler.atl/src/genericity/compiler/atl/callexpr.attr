attribution callexpr(socl) -> (atl)
  uses ocl2ocl // as exprm

  // I should be able to define "external" attributes with a match trace expression associated,
  // like declaring the interface with another transformation (what is required from a transf declared in uses.)

  inh rest    : _!List
  syn result  : atl!OclExpression
  inh previous_result  : atl!OclExpression

  rule socl!PropertyCallExp  
	// x = "incall".println(self)
    first_element = self.calls.first
  	last_element  = self.calls.get(self.calls.size.sub(1))
  
  	first_element[previous_result] <- self.source[ocl2ocl!expr.t] 
    first_element[rest] <- self.calls.tail
		
	self[result] <- last_element[result]
  end

  rule socl!NavigationOrAttributeCall 	
  	// locals
  	rest_calls = self[rest]
  	next_call  = self[rest].first
  	
  	// propagation
 	next_call[rest]   <- rest_calls.tail

  	// is_first_call  = self._refContainer.calls.index_of(self).eq(0)

	new_call = atl!NavigationOrAttributeCallExp.new
	new_call.name   = self.name
	new_call.source = self[previous_result]
	
    next_call[previous_result] <- new_call
    self[result] <- new_call	
  end

  rule socl!IteratorExp
  	next_call  = self[rest].first

	// assign the source
  	atl_iterator_exp = self.mySelf[ocl2ocl!expr.t]  
	atl_iterator_exp.source = self[previous_result]

  	// propagation
    self[result]               <- atl_iterator_exp
 	next_call[rest]            <- self[rest].tail
    next_call[previous_result] <- atl_iterator_exp
  end
  
  rule socl!CollectionOperationCall
  	next_call  = self[rest].first

	// assign the source
  	atl_operation_call = self.mySelf[ocl2ocl!expr.t]  
	atl_operation_call.source = self[previous_result]

  	// propagation
    self[result]               <- atl_operation_call
 	next_call[rest]            <- self[rest].tail
    next_call[previous_result] <- atl_operation_call
  end

  rule socl!OperationCall
  	next_call  = self[rest].first

	// assign the source
  	atl_operation_call = self.mySelf[ocl2ocl!expr.t]  
	atl_operation_call.source = self[previous_result]

  	// propagation
    self[result]               <- atl_operation_call
 	next_call[rest]            <- self[rest].tail
    next_call[previous_result] <- atl_operation_call
  end
end